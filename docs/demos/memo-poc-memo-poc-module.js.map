{"version":3,"sources":["./apps/demos/src/app/features/template/pipes/memo-poc/fibonacci.pipe.ts","./apps/demos/src/app/features/template/pipes/memo-poc/fibonacciMemo.pipe.ts","./apps/demos/src/app/features/template/pipes/memo-poc/memo-poc.component.ts","./apps/demos/src/app/shared/utils/utils.module.ts","./apps/demos/src/app/shared/utils/to-array.pipe.ts","./apps/demos/src/app/features/template/pipes/memo-poc/memo-poc.routes.ts","./apps/demos/src/app/features/template/pipes/memo-poc/memo-poc.module.ts"],"names":[],"mappings":"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","file":"memo-poc-memo-poc-module.js","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { fibonacci } from '../../../../shared/debug-helper/work';\n\n@Pipe({\n  name: 'fibonacci',\n  pure: true\n})\nexport class FibonacciPipe implements PipeTransform {\n\n  transform(value: any, ...args: unknown[]): unknown {\n    return fibonacci(value);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { fibonacci } from '../../../../shared/debug-helper/work';\nimport { getMemoizedFn } from '../../../../rx-angular-pocs';\n\n@Pipe({\n  name: 'fibonacciMemo',\n  pure: true\n})\nexport class FibonacciMemoPipe implements PipeTransform {\n  fibonacciMemoized = getMemoizedFn(fibonacci)\n  transform(value: any, ...args: unknown[]): unknown {\n    return this.fibonacciMemoized(value);\n  }\n\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { fibonacci } from '../../../../shared/debug-helper/work/fibonacci';\n\n@Component({\n  selector: 'rxa-memo-example',\n  template: `\n    <div class=\"row mb-2\">\n      <div class=\"col\">\n        <mat-button-toggle-group name=\"visibleExamples\"\n                                 aria-label=\"Visible Examples\"\n                                 [value]=\"displayStates.none\"\n                                 #group=\"matButtonToggleGroup\">\n          <mat-button-toggle [value]=\"displayStates.none\">None</mat-button-toggle>\n          <mat-button-toggle [value]=\"displayStates.all\">All</mat-button-toggle>\n          <mat-button-toggle [value]=\"displayStates.fnInTpl\">Fn in Tpl</mat-button-toggle>\n          <mat-button-toggle [value]=\"displayStates.purePipe\">purePipe</mat-button-toggle>\n          <mat-button-toggle [value]=\"displayStates.pureMemoPipe\">pureMemoPipe</mat-button-toggle>\n          <mat-button-toggle [value]=\"displayStates.memoPipe\">memoPipe</mat-button-toggle>\n        </mat-button-toggle-group>\n\n        <button mat-raised-button (click)=\"changeNumPositions(-1)\">decrement (-1)</button>\n        <button mat-raised-button (click)=\"changeNumPositions(+1)\">increment (+1)</button>\n      </div>\n    </div>\n    <rxa-dirty-check></rxa-dirty-check>\n    <div class=\"row\">\n      <div class=\"col\" *ngIf=\"group.value === displayStates.fnInTpl || group.value === displayStates.all\">\n        <div class=\"mat-headline\">\n          Function Binding\n        </div>\n        <div> {{ fibonacci(numPositions) }}</div>\n      </div>\n      <div class=\"col\" *ngIf=\"group.value === displayStates.purePipe || group.value === displayStates.all\">\n        <div class=\"mat-headline\">\n          Pure Pipe\n        </div>\n        <div> {{ numPositions | fibonacci }}</div>\n      </div>\n      <div class=\"col\" *ngIf=\"group.value === displayStates.pureMemoPipe || group.value === displayStates.all\">\n        <div class=\"mat-headline\">\n          Pure Pipe with memoization\n        </div>\n        <div> {{ numPositions | fibonacciMemo }}</div>\n      </div>\n      <div class=\"col\" *ngIf=\"group.value === displayStates.memoPipe || group.value === displayStates.all\">\n        <div class=\"mat-headline\">\n          Memo Pipe with fn as argument\n        </div>\n        <div> {{ numPositions | memo:fibonacci }}</div>\n      </div>\n    </div>\n  `,\n  styles: [`\n\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MemoPocComponent {\n  displayStates = {\n    none: -1,\n    all: 0,\n    fnInTpl: 1,\n    purePipe: 2,\n    pureMemoPipe: 3,\n    memoPipe: 4\n  };\n\n  fibonacci = fibonacci;\n  numPositions = 30;\n\n  changeNumPositions(diff: number) {\n    this.numPositions = this.numPositions + diff;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ToArrayPipe } from './to-array.pipe';\n\n\n@NgModule({\n  declarations: [ToArrayPipe],\n  imports: [\n    CommonModule\n  ],\n  exports: [ToArrayPipe]\n})\nexport class UtilsModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'toArray'\n})\nexport class ToArrayPipe implements PipeTransform {\n  transform(value: number | string): any[] {\n    if (typeof value === 'number') {\n      return new Array(value).fill(0).map((_, idx) => idx);\n    }\n    return value != null ? value.toString().split('') : [];\n  }\n}\n","import { MemoPocComponent } from './memo-poc.component';\n\nexport const ROUTES = [\n  {\n    path: '',\n    component: MemoPocComponent\n  }\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { RouterModule } from '@angular/router';\nimport { UnpatchEventsModule } from '@rx-angular/template';\nimport { DirtyChecksModule } from '../../../../shared/debug-helper/dirty-checks';\nimport { MemoPocComponent } from './memo-poc.component';\nimport { ROUTES } from './memo-poc.routes';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { FibonacciPipe } from './fibonacci.pipe';\nimport { MemoModule, PushModule } from '../../../../rx-angular-pocs';\nimport { FibonacciMemoPipe } from './fibonacciMemo.pipe';\n\nconst DECLARATIONS = [MemoPocComponent, FibonacciPipe, FibonacciMemoPipe];\n\n@NgModule({\n  declarations: [DECLARATIONS],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(ROUTES),\n    PushModule,\n    DirtyChecksModule,\n    MatButtonModule,\n    UnpatchEventsModule,\n    MatButtonToggleModule,\n    MemoModule\n  ],\n  exports: [DECLARATIONS]\n})\nexport class MemoPocModule {\n}\n"],"sourceRoot":"webpack:///"}