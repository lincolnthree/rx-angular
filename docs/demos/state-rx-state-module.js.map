{"version":3,"sources":["./apps/demos/src/app/features/experiments/state/composition/parent.component.ts","./apps/demos/src/app/features/experiments/state/selections/parent.component.ts","./apps/demos/src/app/features/experiments/state/subscription/subscription.service.ts","./apps/demos/src/app/features/experiments/state/rx-state.overview.component.ts","./apps/demos/src/app/features/experiments/state/composition/source.service.ts","./apps/demos/src/app/features/experiments/state/selections/child.component.ts","./apps/demos/src/app/features/experiments/state/subscription/parent.component.ts","./apps/demos/src/app/features/experiments/state/rx-state.module.ts","./apps/demos/src/app/features/experiments/state/selectslice/select-slice.component.ts","./apps/demos/src/app/features/experiments/state/selectslice/select-slice.component.html","./apps/demos/src/app/features/experiments/state/subscription/source.service.ts","./apps/demos/src/app/features/experiments/state/rx-state.routes.ts","./apps/demos/src/app/features/experiments/state/subscription-less-interaction/source.service.ts","./apps/demos/src/app/features/experiments/state/subscription-less-interaction/parent.component.ts"],"names":[],"mappings":"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","file":"state-rx-state-module.js","sourcesContent":["import { Component, OnDestroy } from '@angular/core';\nimport { environment } from '../../../../../environments/environment';\nimport { Subscription } from 'rxjs';\nimport { scan, shareReplay } from 'rxjs/operators';\nimport { SourceService } from './source.service';\n\n@Component({\n  selector: 'rxa-state-parent-composition',\n  template: `\n    <h2>Composition Handling</h2>\n    <label>Visible:</label>\n    <input type=\"checkbox\" [(ngModel)]=\"visible\" /><br />\n    <div class=\"case-content\" *ngIf=\"visible\">\n      numberOfEmissions{{ composition1$ | async }}\n    </div>\n  `,\n  changeDetection: environment.changeDetection,\n})\nexport class RxStateParentCompositionComponent implements OnDestroy {\n  subscription = new Subscription();\n  visible = false;\n  hotComposition1$;\n\n  composition1$ = this.source.$.pipe(\n    scan((numOfEmissions) => ++numOfEmissions, 0),\n    shareReplay(1)\n  );\n\n  constructor(private source: SourceService) {\n    // this.hotComposition1$ = this.composition1$.pipe(publishReplay(1)) as ConnectableObservable<any>\n    // this.subscription =  this.hotComposition1$.connect();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { environment } from '../../../../../environments/environment';\nimport { of, Subject } from 'rxjs';\n\n@Component({\n  selector: 'rxa-state-parent-selections',\n  template: `\n    <h2>Selection Handling</h2>\n    <div class=\"case-content\">\n      <pre>{{ values$ | async | json }}</pre>\n      <rxa-state-child-selections\n        [formGroupModel]=\"formGroupModel$ | async\"\n        (formValueChange)=\"values$.next($event)\"\n      >\n      </rxa-state-child-selections>\n    </div>\n  `,\n  changeDetection: environment.changeDetection\n})\nexport class RxStateParentSelectionsComponent {\n  values$ = new Subject();\n\n  formGroupModel$ = of({\n    name: '',\n    age: 0\n  });\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { mergeAll } from 'rxjs/operators';\n\n@Injectable()\nexport class SubscriptionHandlingService implements OnDestroy {\n  subscription = new Subscription();\n  processes$ = new Subject();\n\n  constructor() {\n    this.subscription.add(this.processes$.pipe(mergeAll()).subscribe());\n  }\n\n  hold(o$: Observable<any>): void {\n    this.processes$.next(o$);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { environment } from '../../../../environments/environment';\n\n@Component({\n  selector: 'rxa-push-overview',\n  template: `\n    <h1>ChangeDetection Overview</h1>\n    <div class=\"push-cases\"></div>\n  `,\n  changeDetection: environment.changeDetection,\n  styles: [\n    `\n      .push-cases {\n        display: flex;\n        flex-wrap: wrap;\n      }\n\n      .item {\n        width: 50%;\n      }\n    `,\n  ],\n})\nexport class RxStateOverviewComponent {}\n","import { Injectable } from '@angular/core';\nimport { Subject, timer } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SourceService {\n  values = new Subject();\n  $ = this.values.asObservable();\n\n  constructor() {\n    timer(0, 1000).subscribe((n) => {\n      console.log('change');\n      this.values.next(n);\n    });\n  }\n}\n","import { Component, Input, Output } from '@angular/core';\nimport { environment } from '../../../../../environments/environment';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, startWith, switchMap } from 'rxjs/operators';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'rxa-state-child-selections',\n  template: `\n    <div class=\"case-content\">\n      <form *ngIf=\"formGroup$ | async as formGroup\" [formGroup]=\"formGroup\">\n        <mat-form-field *ngFor=\"let c of formGroup.controls | keyvalue\">\n          <label>{{ c.key }}</label>\n          <input matInput [formControlName]=\"c.key\"/>\n        </mat-form-field>\n      </form>\n    </div>\n  `,\n  changeDetection: environment.changeDetection\n  // providers: [SubscriptionHandlingService]\n})\nexport class RxStateChildSelectionsComponent {\n  state$ = new ReplaySubject(1);\n\n  @Input()\n  set formGroupModel(modelFromInput: { [key: string]: any }) {\n    if (modelFromInput) {\n      this.state$.next(modelFromInput);\n    }\n  }\n\n  formGroup$: Observable<FormGroup> = this.state$.pipe(\n    startWith({}),\n    map((input) => this.getFormGroupFromConfig(input))\n  );\n\n  @Output() formValueChange = this.formGroup$.pipe(\n    switchMap((fg: FormGroup) => fg.valueChanges)\n  );\n\n  constructor(private fb: FormBuilder) {\n  }\n\n  select(o$: Observable<any>) {\n    return o$.pipe(shareReplay(1));\n  }\n\n  getFormGroupFromConfig(modelFromInput) {\n    const config = Object.entries(modelFromInput).reduce(\n      (c, [name, initialValue]) => ({ ...c, [name]: [initialValue] }),\n      {}\n    );\n    return this.fb.group(config);\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { environment } from '../../../../../environments/environment';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\nimport { SourceService } from './source.service';\nimport { SubscriptionHandlingService } from './subscription.service';\n\n@Component({\n  selector: 'rxa-state-parent-subscription',\n  template: `\n    <h2>Subscription Handling</h2>\n    <div class=\"case-content\">Process running internally</div>\n  `,\n  changeDetection: environment.changeDetection,\n  providers: [SubscriptionHandlingService]\n})\nexport class RxStateParentSubscriptionComponent implements OnDestroy {\n  subscription = new Subscription();\n  onDestroy$ = new Subject<void>();\n\n  process1$ = this.source.$.pipe(\n    tap((num) => {\n      console.log('New value: ', num);\n    })\n  );\n\n  constructor(\n    private source: SourceService,\n    private subs: SubscriptionHandlingService\n  ) {\n    this.process1$.pipe(takeUntil(this.onDestroy$)).subscribe();\n  }\n\n  ngOnDestroy(): void {\n    this.onDestroy$.next();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { LetModule, PushModule } from '@rx-angular/template';\nimport { RouterModule } from '@angular/router';\nimport { ROUTES as RX_STATE_ROUTES } from './rx-state.routes';\n\nimport { RxStateOverviewComponent } from './rx-state.overview.component';\nimport { RxStateParentCompositionComponent } from './composition/parent.component';\nimport { RxStateParentSubscriptionComponent } from './subscription/parent.component';\nimport { RxStateParentSelectionsComponent } from './selections/parent.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RxStateChildSelectionsComponent } from './selections/child.component';\nimport { RxStateParentSubscriptionLessComponent } from './subscription-less-interaction/parent.component';\nimport { RxStateSelectSliceComponent } from './selectslice/select-slice.component';\n\n@NgModule({\n  declarations: [\n    RxStateOverviewComponent,\n    RxStateChildSelectionsComponent,\n    RxStateParentCompositionComponent,\n    RxStateParentSelectionsComponent,\n    RxStateParentSubscriptionComponent,\n    RxStateParentSubscriptionLessComponent,\n    RxStateSelectSliceComponent,\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(RX_STATE_ROUTES),\n    MatListModule,\n    MatTableModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    LetModule, PushModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class RxStateModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { RxState, selectSlice } from '@rx-angular/state';\nimport { Observable, of } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\ninterface MyState {\n  title: string;\n  list: string[];\n  isItemRendered: boolean;\n}\n\n@Component({\n  selector: 'rxa-select-slice',\n  templateUrl: './select-slice.component.html',\n  styleUrls: ['./select-slice.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RxStateSelectSliceComponent extends RxState<MyState> {\n  readonly viewState$ = this.select(\n    selectSlice(['list', 'isItemRendered']),\n    filter(({ isItemRendered, list }) => !isItemRendered && list.length > 0)\n  );\n\n  constructor() {\n    super();\n    const state$: Observable<MyState> = of(\n      { title: 'myTitle', list: ['foo', 'bar'], isItemRendered: true },\n      { title: 'myTitle', list: ['foo', 'bar'], isItemRendered: false },\n      { title: 'nextTitle', list: ['foo', 'baR'], isItemRendered: true },\n      { title: 'nextTitle', list: ['fooRz', 'boo'], isItemRendered: false }\n    );\n    this.connect(state$);\n  }\n}\n","<p>{{ viewState$ | async | json }}</p>\n","import { Injectable } from '@angular/core';\nimport { timer } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SourceService {\n  $ = timer(0, 1000);\n}\n","import { RxStateOverviewComponent } from './rx-state.overview.component';\nimport { RxStateSelectSliceComponent } from './selectslice/select-slice.component';\nimport { RxStateParentSubscriptionComponent } from './subscription/parent.component';\nimport { RxStateParentSelectionsComponent } from './selections/parent.component';\nimport { RxStateParentCompositionComponent } from './composition/parent.component';\nimport { RxStateParentSubscriptionLessComponent } from './subscription-less-interaction/parent.component';\n\nexport const ROUTES = [\n  {\n    path: 'rx-base-state',\n    component: RxStateOverviewComponent,\n  },\n  {\n    path: 'subscription',\n    component: RxStateParentSubscriptionComponent,\n  },\n  {\n    path: 'composition',\n    component: RxStateParentCompositionComponent,\n  },\n  {\n    path: 'selections',\n    component: RxStateParentSelectionsComponent,\n  },\n  {\n    path: 'connect',\n    component: RxStateParentSubscriptionLessComponent,\n  },\n  {\n    path: 'selectslice',\n    component: RxStateSelectSliceComponent,\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { Subject, timer } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SourceService {\n  values = new Subject();\n  $ = this.values.asObservable();\n\n  constructor() {\n    timer(0, 1000).subscribe((n) => {\n      console.log('change');\n      this.values.next(n);\n    });\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { environment } from '../../../../../environments/environment';\nimport { Subject, Subscription } from 'rxjs';\nimport { map, scan } from 'rxjs/operators';\nimport { SourceService } from './source.service';\n\ninterface ComponentState {\n  title: string;\n  value: number;\n}\n\n@Component({\n  selector: 'rxa-state-parent-subscription-less-interaction',\n  template: `\n    <h2>Subscription Less interaction</h2>\n    <div class=\"case-content\">\n      state:\n      <pre>{{ state$ | async | json }}</pre>\n    </div>\n  `,\n  changeDetection: environment.changeDetection,\n})\nexport class RxStateParentSubscriptionLessComponent implements OnDestroy {\n  subscription = new Subscription();\n  stateSources$ = new Subject();\n\n  state$ = this.stateSources$.pipe(\n    scan(\n      (state: ComponentState, slices: Partial<ComponentState>) => ({\n        ...state,\n        ...slices,\n      }),\n      {}\n    )\n  );\n\n  source1$ = this.source.$.pipe(map((v) => ({ value: v })));\n\n  constructor(private source: SourceService) {\n    this.subscription = this.source1$.subscribe((v) => {\n      this.stateSources$.next(v);\n    });\n  }\n\n  /*\n    (this.state$ as any).connect();\n    this.stateSources$.next(this.source1$.pipe(tap(console.log)));\n\n   state$ = this.stateSources$.pipe(\n    map(o => isObservable(o) ? o : of(o)),\n    mergeAll(),\n    scan((state: ComponentState, slices: Partial<ComponentState>) => ({...state, ...slices}), {}),\n    publishReplay(1)\n  );\n  */\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n"],"sourceRoot":"webpack:///"}