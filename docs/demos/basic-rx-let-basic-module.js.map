{"version":3,"sources":["./apps/demos/src/app/rx-angular-pocs/cdk/debug/dirty-check/dirty-checks.module.ts","./apps/demos/src/app/features/template/rx-let/basic/rx-let-basic.component.ts","./apps/demos/src/app/features/template/rx-let/basic/rx-let-basic.module.ts","./apps/demos/src/app/rx-angular-pocs/cdk/debug/dirty-check/dirty-checks.component.ts"],"names":[],"mappings":"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","file":"basic-rx-let-basic-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { DirtyChecksComponent } from './dirty-checks.component';\nimport { CommonModule } from '@angular/common';\n\nconst DEPRECATIONS = [DirtyChecksComponent];\n\n@NgModule({\n  declarations: [...DEPRECATIONS],\n  imports: [CommonModule],\n  exports: [...DEPRECATIONS],\n})\nexport class DirtyChecksModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-rx-let-poc',\n  template: `\n    <rxa-visualizer>\n      <div visualizerHeader>\n        <h2>rxLet BASIC</h2>\n        <rxa-strategy-select\n          (strategyChange)=\"strategy = $event\"\n        ></rxa-strategy-select>\n        <rxa-value-provider\n          #v=\"rxaValueProvider\"\n          [buttons]=\"true\"\n        ></rxa-value-provider>\n        <button mat-raised-button (click)=\"v.next()\" class=\"mr-1\">\n          toggle\n        </button>\n        <button mat-raised-button [unpatch] (click)=\"v.next()\">\n          toggle (unpatched)\n        </button>\n      </div>\n      <div class=\"row w-100\">\n        <div class=\"col-sm-3\">\n          <h3>RxLet</h3>\n          <strong *rxLet=\"rendered$; let rendered\"\n            >Rendercallback: {{ rendered }}</strong\n          >\n          <div\n            class=\"dh-embedded-view\"\n            *rxLet=\"\n              v.incremental$;\n              let value;\n              renderCallback: renderCallback;\n              strategy: strategy\n            \"\n          >\n            <rxa-dirty-check></rxa-dirty-check>\n            Value: {{ value }}\n          </div>\n        </div>\n      </div>\n    </rxa-visualizer>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RxLetBasicComponent {\n  private _renderCalled = 0;\n  readonly renderCallback = new Subject();\n\n  rendered$ = this.renderCallback.pipe(map(() => this._renderCalled++));\n\n  strategy;\n}\n","import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DirtyChecksModule } from '../../../../rx-angular-pocs/cdk/debug/dirty-check/dirty-checks.module';\nimport { UnpatchEventsModule } from '../../../../rx-angular-pocs/template/directives/unpatch/unpatch-events.module';\nimport { StrategySelectModule } from '../../../../shared/debug-helper/strategy-select/strategy-select.module';\nimport { ValueProvidersModule } from '../../../../shared/debug-helper/value-provider/value-providers.module';\nimport { VisualizerModule } from '../../../../shared/debug-helper/visualizer/visualizer.module';\nimport { RxLetBasicComponent } from './rx-let-basic.component';\nimport { LetModule } from '@rx-angular/template';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RxLetBasicComponent\n  }\n];\n\n@NgModule({\n  declarations: [RxLetBasicComponent],\n  imports: [\n    RouterModule.forChild(routes),\n    DirtyChecksModule,\n    MatButtonModule,\n    ValueProvidersModule,\n    UnpatchEventsModule,\n    StrategySelectModule,\n    VisualizerModule,\n    LetModule,\n  ],\n})\nexport class RxLetBasicModule {}\n","import { AfterViewInit, Component, ElementRef, Input, Renderer2 } from '@angular/core';\n\n// tslint:disable\n@Component({\n  selector: 'rxa-dirty-check',\n  template: `\n    <div class=\"dirty-check\">\n      <span class=\"indicator\">{{ numDirtyChecks() }}</span>\n    </div>\n  `,\n  styles: [\n      `\n      :host .indicator {\n        border: 1px solid #ffff005f;\n      }\n    `\n  ]\n  //changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DirtyChecksComponent implements AfterViewInit {\n  displayElem;\n  dirtyChecks = 0;\n\n  @Input()\n  log;\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {\n  }\n\n  ngAfterViewInit() {\n    this.displayElem = this.elementRef.nativeElement.children[0].children[0];\n    this.numDirtyChecks();\n  }\n\n  numDirtyChecks() {\n    if (this.log) {\n      console.log('dirtyCheck', this.log);\n    } else {\n\n    }\n  }\n}\n"],"sourceRoot":"webpack:///"}