{"version":3,"sources":["./apps/demos/src/app/features/tutorials/basics/solution/demo-basics.adapter.service.ts","./apps/demos/src/app/features/tutorials/basics/solution/demo-basics.view-model.service.ts","./apps/demos/src/app/features/tutorials/basics/3-output-bindings/output-bindings.solution.component.ts","./apps/demos/src/app/features/tutorials/basics/2-input-bindings/input-bindings-container.component.ts","./apps/demos/src/app/features/tutorials/basics/5-side-effects/side-effects.start.component.ts","./apps/demos/src/app/features/tutorials/basics/1-setup/setup.solution.component.ts","./apps/demos/src/app/features/tutorials/basics/6-presenter-pattern/presenter-pattern.start.component.ts","./apps/demos/src/app/features/tutorials/basics/2-input-bindings/input-bindings.solution.component.ts","./apps/demos/src/app/features/tutorials/basics/tutorial-basics.module.ts","./apps/demos/src/app/features/tutorials/basics/6-presenter-pattern/adapter.ts","./apps/demos/src/app/features/tutorials/basics/1-setup/setup.start.component.ts","./apps/demos/src/app/features/tutorials/basics/1-setup/setup-container.component.ts","./apps/demos/src/app/features/tutorials/basics/6-presenter-pattern/presenter-pattern.container.component.ts","./apps/demos/src/app/features/tutorials/basics/4-global-state/global-state-container.component.ts","./apps/demos/src/app/features/tutorials/basics/data-access/list-resource/index.ts","./apps/demos/src/app/features/tutorials/basics/5-side-effects/side-effects.solution.component.ts","./apps/demos/src/app/features/tutorials/basics/data-access/list-resource/list.service.ts","./apps/demos/src/app/features/tutorials/basics/solution/demo-basics.container.component.ts","./apps/demos/src/app/features/tutorials/basics/4-global-state/global-state.start.component.ts","./apps/demos/src/app/features/tutorials/basics/4-global-state/global-state.solution.component.ts","./apps/demos/src/app/features/tutorials/basics/6-presenter-pattern/presenter.ts","./apps/demos/src/app/features/tutorials/basics/2-input-bindings/input-bindings.start.component.ts","./apps/demos/src/app/features/tutorials/basics/3-output-bindings/output-bindings-container.component.ts","./apps/demos/src/app/features/tutorials/basics/5-side-effects/side-effects-container.component.ts","./apps/demos/src/app/features/tutorials/basics/solution/demo-basics.component.ts","./apps/demos/src/app/features/tutorials/basics/solution/demo-basics.view.html","./apps/demos/src/app/features/tutorials/basics/3-output-bindings/output-bindings.start.component.ts","./apps/demos/src/app/features/tutorials/basics/6-presenter-pattern/presenter-pattern.solutuion.component.ts"],"names":[],"mappings":"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","file":"basics-tutorial-basics-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DemoBasicsItem } from './demo-basics.view-model.service';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { ActivatedRoute } from '@angular/router';\n\n@Injectable()\nexport class DemoBasicsAdapterService extends RxState<any> {\n  loadingSignal$ = this.listService.loadingSignal$;\n  list$: Observable<DemoBasicsItem[]> = this.listService.list$.pipe(\n    map(this.parseListItems)\n  );\n\n  constructor(private listService: ListService, route: ActivatedRoute) {\n    super();\n    this.hold(route.params, () => this.refetchList());\n  }\n\n  refetchList() {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { merge, Observable, Subject, timer } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\nexport interface DemoBasicsBaseModel {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n  isPending: boolean;\n}\n\nexport interface DemoBasicsView {\n  refreshClicks: Subject<Event>;\n  listExpandedChanges: Subject<boolean>;\n  baseModel$: Observable<DemoBasicsBaseModel>;\n}\n\nconst initState: DemoBasicsBaseModel = {\n  refreshInterval: 1000,\n  listExpanded: true,\n  isPending: true,\n  list: [],\n};\n\n@Injectable()\nexport class DemoBasicsViewModelService extends RxState<DemoBasicsBaseModel>\n  implements DemoBasicsView {\n  baseModel$ = this.select();\n\n  refreshClicks = new Subject<Event>();\n  listExpandedChanges = new Subject<boolean>();\n\n  refreshListSideEffect$ = merge(\n    this.refreshClicks,\n    this.select(\n      map((s) => s.refreshInterval),\n      filter((refreshInterval) => refreshInterval > 4000)\n    ).pipe(switchMap((ms) => timer(ms)))\n  );\n\n  constructor() {\n    super();\n    this.set(initState);\n\n    this.connect('listExpanded', this.listExpandedChanges);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { distinctUntilKeyChanged, map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-output-bindings-solution',\n  template: `\n    <h3>\n      Output Bindings\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpandedChanges.next($event)\"\n      [expanded]=\"vm.listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OutputBindingsSolution extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({ refreshInterval });\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.$.pipe(distinctUntilKeyChanged('listExpanded'), map(s => s.listExpanded));\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n    this.connect('listExpanded', this.listExpandedChanges)\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-input-bindings-container',\n  template: `\n    <h1>Input Bindings</h1>\n    <mat-form-field>\n      <label>RefreshInterval</label>\n      <input\n        type=\"number\"\n        (input)=\"refreshIntervalInput$.next($event)\"\n        matInput\n      />\n    </mat-form-field>\n\n    <rxa-input-bindings-start\n      [refreshInterval]=\"refreshInterval$ | async\"\n      (listExpandedChange)=\"listExpandedChange$.next($event)\"\n    >\n    </rxa-input-bindings-start>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputBindingsContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n  listExpandedChange$ = new Subject<boolean>();\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { distinctUntilKeyChanged, map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: []\n};\n\n@Component({\n  selector: 'rxa-side-effects-start',\n  template: `\n    <h3>\n      Side Effects\n    </h3>\n    <mat-expansion-panel\n      *ngIf='model$ | async as vm'\n      (expandedChange)='listExpandedChanges.next($event)'\n      [expanded]='vm.listExpanded'\n    >\n      <mat-expansion-panel-header class='list'>\n        <mat-progress-bar *ngIf='false' [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ vm.list.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <!--👇 Change the refresh button -->\n      <button\n        mat-raised-button\n        color='primary'\n        (click)='onRefreshClicks($event)'\n      >\n        Refresh List\n      </button>\n\n      <div *ngIf='vm.list?.length; else noList'>\n        <mat-list>\n          <mat-list-item *ngFor='let item of vm.list'>\n            {{ item.name }}\n          </mat-list-item>\n        </mat-list>\n      </div>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SideEffectsStart extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  //👇 Create a new Subject\n\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  //👇 Set the refresh interval\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({ refreshInterval });\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.$.pipe(distinctUntilKeyChanged('listExpanded'), map(s => s.listExpanded));\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n    this.connect('listExpanded', this.listExpandedChanges);\n    this.connect('list', this.listService.list$.pipe(map(this.parseListItems))); // Add the hold method\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  //👇 Initialize a background process\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  //👇 Dispatch an action to the global store\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  listExpanded: boolean;\n  list: DemoBasicsItem[];\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-setup-solution',\n  template: `\n    <h3>\n      Setup\n    </h3>\n    {{model$  | async | json}}\n    <mat-expansion-panel\n      (expandedChange)=\"listExpanded = $event; listExpandedChanges.next($event)\"\n      [expanded]=\"listExpanded\">\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ _refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  styles: [\n    `\n      .list .mat-expansion-panel-header {\n        position: relative;\n      }\n\n      .list .mat-expansion-panel-header mat-progress-bar {\n        position: absolute;\n        top: 0px;\n        left: 0;\n      }\n\n      .list .mat-expansion-panel-content .mat-expansion-panel-body {\n        padding-top: 10px;\n      }\n    `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SetupSolution extends RxState<ComponentState> implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  _refreshInterval: number = initComponentState.refreshInterval;\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this._refreshInterval = refreshInterval;\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.listExpandedChanges;\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this._refreshInterval)\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { distinctUntilKeyChanged, map, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: []\n};\n\n@Component({\n  selector: 'rxa-presenter-pattern-start',\n  template: `\n    <h3>\n      Presenter Pattern\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpandedChanges.next($event)\"\n      [expanded]=\"vm.listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ vm.list.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <div *ngIf=\"vm.list?.length; else noList\">\n        <mat-list>\n          <mat-list-item *ngFor=\"let item of vm.list\">\n            {{ item.name }}\n          </mat-list-item>\n        </mat-list>\n      </div>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PresenterPatternStart extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({ refreshInterval });\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.$.pipe(distinctUntilKeyChanged('listExpanded'), map(s => s.listExpanded));\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n    this.connect('listExpanded', this.listExpandedChanges);\n    this.connect('list', this.listService.list$.pipe(map(this.parseListItems)));\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-input-bindings-solution',\n  template: `\n    <h3>\n      Input Bindings\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpanded = $event; listExpandedChanges.next($event)\"\n      [expanded]=\"listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  styles: [\n    `\n        .list .mat-expansion-panel-header {\n          position: relative;\n        }\n  \n        .list .mat-expansion-panel-header mat-progress-bar {\n          position: absolute;\n          top: 0px;\n          left: 0;\n        }\n  \n        .list .mat-expansion-panel-content .mat-expansion-panel-body {\n          padding-top: 10px;\n        }\n      `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputBindingsSolution extends RxState<ComponentState> implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({ refreshInterval });\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.listExpandedChanges;\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { RouterModule } from '@angular/router';\nimport { SetupContainerComponent } from './1-setup/setup-container.component';\nimport { SetupSolution } from './1-setup/setup.solution.component';\nimport { SetupStart } from './1-setup/setup.start.component';\nimport { InputBindingsContainerComponent } from './2-input-bindings/input-bindings-container.component';\nimport { InputBindingsSolution } from './2-input-bindings/input-bindings.solution.component';\nimport { InputBindingsStart } from './2-input-bindings/input-bindings.start.component';\nimport { OutputBindingsContainerComponent } from './3-output-bindings/output-bindings-container.component';\nimport { OutputBindingsSolution } from './3-output-bindings/output-bindings.solution.component';\nimport { OutputBindingsStart } from './3-output-bindings/output-bindings.start.component';\nimport { GlobalStateContainerComponent } from './4-global-state/global-state-container.component';\nimport { GlobalStateSolution } from './4-global-state/global-state.solution.component';\nimport { GlobalStateStart } from './4-global-state/global-state.start.component';\nimport { SideEffectsContainerComponent } from './5-side-effects/side-effects-container.component';\nimport { SideEffectsSolution } from './5-side-effects/side-effects.solution.component';\nimport { SideEffectsStart } from './5-side-effects/side-effects.start.component';\nimport { PresenterPatternContainerComponent } from './6-presenter-pattern/presenter-pattern.container.component';\nimport { PresenterPatternSolution } from './6-presenter-pattern/presenter-pattern.solutuion.component';\nimport { PresenterPatternStart } from './6-presenter-pattern/presenter-pattern.start.component';\nimport { DemoBasicsComponent } from './solution/demo-basics.component';\nimport { DemoBasicsContainerComponent } from './solution/demo-basics.container.component';\n\n\nexport const ROUTES = [\n  {\n    path: '',\n    redirectTo: 'setup'\n  },\n  {\n    path: 'setup',\n    component: SetupContainerComponent\n  },\n  {\n    path: 'input-bindings',\n    component: InputBindingsContainerComponent\n  },\n  {\n    path: 'output-bindings',\n    component: OutputBindingsContainerComponent\n  },\n  {\n    path: 'global-state',\n    component: GlobalStateContainerComponent\n  },\n  {\n    path: 'side-effects',\n    component: SideEffectsContainerComponent\n  },\n  {\n    path: 'presenter-pattern',\n    component: PresenterPatternContainerComponent\n  },\n  {\n    path: 'solution',\n    component: DemoBasicsContainerComponent\n  }\n];\nconst DECLARATIONS = [\n  SetupContainerComponent,\n  SetupStart,\n  SetupSolution,\n  InputBindingsContainerComponent,\n  InputBindingsStart,\n  InputBindingsSolution,\n  OutputBindingsContainerComponent,\n  OutputBindingsStart,\n  OutputBindingsSolution,\n  GlobalStateContainerComponent,\n  GlobalStateStart,\n  GlobalStateSolution,\n  SideEffectsContainerComponent,\n  SideEffectsStart,\n  SideEffectsSolution,\n  PresenterPatternContainerComponent,\n  PresenterPatternStart,\n  PresenterPatternSolution,\n  DemoBasicsContainerComponent,\n  DemoBasicsComponent\n];\nexport const materialModules = [\n  MatIconModule,\n  MatListModule,\n  MatCardModule,\n  MatButtonModule,\n  MatExpansionModule,\n  MatBadgeModule,\n  MatProgressSpinnerModule,\n  MatProgressBarModule,\n  MatInputModule,\n  MatFormFieldModule\n];\n\n@NgModule({\n  declarations: [DECLARATIONS],\n  imports: [CommonModule, materialModules, RouterModule.forChild(ROUTES)],\n  exports: [DECLARATIONS]\n})\nexport class TutorialBasicsModule {\n}\n","import { Injectable } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { map } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\nimport { ComponentState } from './presenter';\nimport { DemoBasicsItem } from './presenter-pattern.start.component';\n\n@Injectable()\nexport class Adapter extends RxState<Pick<ComponentState, 'list'>> {\n\n  list$ = this.select('list');\n  constructor(\n    private listService: ListService\n  ) {\n    super();\n    this.connect('list', this.listService.list$\n      .pipe(map(this.parseListItems))\n    );\n  }\n\n  refresh = () => {\n    this.listService.refetchList()\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\n//👇 1- import RxState\nimport { RxState } from '@rx-angular/state';\n//👇 2- define a component state\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\n//👇 The  initial base-state is normally derived from somewhere else automatically but could also get specified statically here.\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: []\n};\n\n@Component({\n  selector: 'rxa-setup-start',\n  //👇 Render the model property of the component\n  template: `\n    model$: <pre>{{model$ | async | json}}</pre>\n    <h3>\n      Setup\n    </h3>\n    <mat-expansion-panel\n      (expandedChange)=\"listExpanded = $event; listExpandedChanges.next($event)\"\n      [expanded]=\"listExpanded\">\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ _refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  styles: [\n    `\n      .list .mat-expansion-panel-header {\n        position: relative;\n      }\n\n      .list .mat-expansion-panel-header mat-progress-bar {\n        position: absolute;\n        top: 0px;\n        left: 0;\n      }\n\n      .list .mat-expansion-panel-content .mat-expansion-panel-body {\n        padding-top: 10px;\n      }\n    `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n//👇 3- extend the component\nexport class SetupStart extends RxState<ComponentState> implements OnInit, OnDestroy {\n  //👇 Set up the model property of the component\n  model$ = this.select();\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  _refreshInterval: number = initComponentState.refreshInterval;\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this._refreshInterval = refreshInterval;\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.listExpandedChanges;\n  constructor(\n    private listService: ListService\n  ) {\n    //👇 Always call super() first in the constructor\n    super();\n    //👇 Call set() to initialize the state\n    this.set(initComponentState);\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this._refreshInterval)\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-setup-container',\n  template: `\n    <h1>Setup</h1>\n    <mat-form-field>\n      <label>RefreshInterval</label>\n      <input\n        type=\"number\"\n        (input)=\"refreshIntervalInput$.next($event)\"\n        matInput\n      />\n    </mat-form-field>\n\n    <rxa-setup-start\n      [refreshInterval]=\"refreshInterval$ | async\"\n      (listExpandedChange)=\"listExpandedChange$.next($event)\">\n    </rxa-setup-start>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SetupContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n  listExpandedChange$ = new Subject<boolean>();\n}\n","import { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-presenter-pattern-container',\n  template: `\n    <h1>Presenter Pattern</h1>\n    <mat-form-field>\n      <label>RefreshInterval {{ refreshInterval$ | async }}</label>\n      <input\n        type=\"number\"\n        (input)=\"refreshIntervalInput$.next($event)\"\n        matInput\n      />\n    </mat-form-field>\n\n    <rxa-presenter-pattern-start [refreshInterval]=\"refreshInterval$ | async\">\n    </rxa-presenter-pattern-start>\n  `,\n})\nexport class PresenterPatternContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-output-bindings-container',\n  template: `\n    <h1>Global State</h1>\n    <mat-form-field>\n      <label>RefreshInterval</label>\n      <input\n        type=\"number\"\n        (input)=\"refreshIntervalInput$.next($event)\"\n        matInput\n      />\n    </mat-form-field>\n\n    <rxa-global-state-start\n      [refreshInterval]=\"refreshInterval$ | async\"\n      (listExpandedChange)=\"listExpandedChange$.next($event)\"\n    >\n    </rxa-global-state-start>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GlobalStateContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n  listExpandedChange$ = new Subject<boolean>();\n}\n","export * from './list.service';\nexport * from './list.server.model';\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { Subject } from 'rxjs';\nimport { distinctUntilKeyChanged, map, startWith } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-side-effects-solution',\n  template: `\n    <h3>\n      Side Effects\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpandedChanges.next($event)\"\n      [expanded]=\"vm.listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ vm.list.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"refreshClicks$.next($event)\">\n        Refresh List\n      </button>\n\n      <div *ngIf=\"vm.list?.length; else noList\">\n        <mat-list>\n          <mat-list-item *ngFor=\"let item of vm.list\">\n            {{ item.name }}\n          </mat-list-item>\n        </mat-list>\n      </div>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SideEffectsSolution extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  listExpandedChanges = new Subject<boolean>();\n  refreshClicks$ = new Subject<Event>();\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({ refreshInterval });\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.$.pipe(distinctUntilKeyChanged('listExpanded'), map(s => s.listExpanded));\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n    this.connect('listExpanded', this.listExpandedChanges);\n    this.connect('list', this.listService.list$.pipe(map(this.parseListItems)));\n    this.hold(this.refreshClicks$.pipe(startWith(true)), () => this.listService.refetchList())\n  }\n\n  ngOnInit(): void {\n    this.refreshClicks$.next();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { ListServerItem } from './list.server.model';\nimport { catchError, delay, distinctUntilChanged, filter, map } from 'rxjs/operators';\n\ninterface ListServiceState {\n  list: any[];\n  loading: boolean;\n  error: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ListService {\n  private state$ = new BehaviorSubject<Partial<ListServiceState>>({\n    list: [],\n    loading: false,\n    error: '',\n  });\n\n  list$ = this.state$.pipe(\n    map((s) => s.list),\n    distinctUntilChanged()\n  );\n\n  errorSignal$ = this.state$.pipe(\n    map((s) => s.error),\n    filter((b) => !!b)\n  );\n  successSignal$ = this.state$.pipe(\n    map(({ loading, error }) => ({ loading, error })),\n    filter((o) => o.loading === false && o.error !== '')\n  );\n\n  loadingSignal$ = this.state$.pipe(map(({ loading }) => loading));\n\n  constructor(private http: HttpClient) {\n    this.state$.subscribe(console.log);\n  }\n\n  refetchList() {\n    this.state$.next({ ...this.state$.getValue(), loading: true });\n    this.httpGetListItem({ num: 1 })\n      .pipe(catchError((e) => of({ error: e, loading: false, list: [] })))\n      .subscribe((slice) => {\n        console.log('list: ', this.state$.getValue());\n        return this.state$.next({\n          error: '',\n          list: [...this.state$.value.list, ...slice.list],\n          loading: false,\n        });\n      });\n  }\n\n  httpGetListItem = (arg?: any): Observable<{ list: any[] }> =>\n    of(getData(arg)).pipe(\n      // tslint:disable-next-line:no-bitwise\n      delay(~~(Math.random() * 5000)),\n      map((list) => ({ list }))\n    );\n}\n\nexport function getData(cfg = { num: 5 }): ListServerItem[] {\n  // tslint:disable-next-line:no-bitwise\n  const randId = (s: string) => s + ~~(Math.random() * 100);\n  return new Array(cfg.num).fill(cfg.num).map((_) => ({\n    id: randId('id'),\n    name: randId('name'),\n    created: Date.now() / 1000 + '',\n  }));\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-demo-basics4-container',\n  template: `\n      <h1>Solution</h1>\n      <br/>\n      <mat-form-field>\n          <label>RefreshInterval</label>\n          <input\n                  type=\"number\"\n                  (input)=\"refreshIntervalInput$.next($event)\"\n                  matInput\n          />\n      </mat-form-field>\n\n      <rxa-demo-basics [refreshInterval]=\"refreshInterval$ | async\"></rxa-demo-basics>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DemoBasicsContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { distinctUntilKeyChanged, map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: []\n};\n\n@Component({\n  selector: 'rxa-global-state-start',\n  template: `\n    <h3>\n      Output Bindings\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpanded = $event; listExpandedChanges.next($event)\"\n      [expanded]=\"listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <!--👇 Refactor state management -->\n        <mat-panel-description>\n          <span\n          >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GlobalStateStart extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({ refreshInterval });\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.$.pipe(distinctUntilKeyChanged('listExpanded'), map(s => s.listExpanded));\n  //👇 Connect the global state to the list slice\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n    this.connect('listExpanded', this.listExpandedChanges);\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { distinctUntilKeyChanged, map, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: []\n};\n\n@Component({\n  selector: 'rxa-global-state-solution',\n  template: `\n    <h3>\n      Global State\n    </h3>\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpandedChanges.next($event)\"\n      [expanded]=\"vm.listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ vm.list.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <div *ngIf=\"vm.list?.length; else noList\">\n        <mat-list>\n          <mat-list-item *ngFor=\"let item of vm.list\">\n            {{ item.name }}\n          </mat-list-item>\n        </mat-list>\n      </div>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GlobalStateSolution extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({ refreshInterval });\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.$.pipe(distinctUntilKeyChanged('listExpanded'), map(s => s.listExpanded));\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n    this.connect('listExpanded', this.listExpandedChanges);\n    this.connect('list', this.listService.list$.pipe(map(this.parseListItems)));\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { merge, Subject, timer } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nexport interface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Injectable()\nexport class Presenter extends RxState<ComponentState> {\n  refreshClicks = new Subject<Event>();\n  listExpandedChanges = new Subject<boolean>();\n\n  vm$ = this.select();\n\n  refreshListTrigger$ = merge(\n    this.refreshClicks,\n    this.select(\n      map((s) => s.refreshInterval),\n      switchMap((ms) => timer(0, ms))\n    )\n  )\n\n  constructor() {\n    super();\n    this.set(initComponentState);\n    this.connect(\n      this.listExpandedChanges.pipe(map((b) => ({ listExpanded: b })))\n    );\n  }\n\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { interval, Subject, Subscription } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-input-bindings-start',\n  template: `\n    <h3>\n     Input Bindings\n    </h3>\n    {{model$  | async | json}}\n    <!--👇 Bind the state to the view -->\n    <mat-expansion-panel\n      (expandedChange)=\"listExpanded = $event; listExpandedChanges.next($event)\"\n      [expanded]=\"listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <!--👇 Replace the refreshInterval component -->\n        <mat-panel-description>\n          <span\n            >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ _refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  styles: [\n    `\n      .list .mat-expansion-panel-header {\n        position: relative;\n      }\n\n      .list .mat-expansion-panel-header mat-progress-bar {\n        position: absolute;\n        top: 0px;\n        left: 0;\n      }\n\n      .list .mat-expansion-panel-content .mat-expansion-panel-body {\n        padding-top: 10px;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputBindingsStart extends RxState<ComponentState> implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  _refreshInterval: number = initComponentState.refreshInterval;\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      //👇 Partially update the state with the state slice\n      this._refreshInterval = refreshInterval;\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.listExpandedChanges;\n\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n  //👇 Update the resetRefreshTick method\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this._refreshInterval)\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-output-bindings-container',\n  template: `\n    <h1>Output Bindings</h1>\n    <mat-form-field>\n      <label>RefreshInterval</label>\n      <input\n        type=\"number\"\n        (input)=\"refreshIntervalInput$.next($event)\"\n        matInput\n      />\n    </mat-form-field>\n\n    <rxa-output-bindings-start\n      [refreshInterval]=\"refreshInterval$ | async\"\n      (listExpandedChange)=\"listExpandedChange$.next($event)\"\n    >\n    </rxa-output-bindings-start>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OutputBindingsContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n  listExpandedChange$ = new Subject<boolean>();\n}\n","import { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rxa-side-effects-container',\n  template: `\n    <h1>Side Effects</h1>\n    <br/>\n    <mat-form-field>\n      <label>RefreshInterval</label>\n      <input\n        type=\"number\"\n        (input)=\"refreshIntervalInput$.next($event)\"\n        matInput/>\n    </mat-form-field>\n\n    <rxa-side-effects-start [refreshInterval]=\"refreshInterval$ | async\">\n    </rxa-side-effects-start>\n  `,\n})\nexport class SideEffectsContainerComponent {\n  refreshIntervalInput$ = new Subject<Event>();\n  refreshInterval$ = this.refreshIntervalInput$.pipe(\n    map((e: any) => e.target.value)\n  );\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { DemoBasicsViewModelService } from './demo-basics.view-model.service';\nimport { RxState } from '@rx-angular/state';\nimport { DemoBasicsAdapterService } from './demo-basics.adapter.service';\n\n@Component({\n  selector: 'rxa-demo-basics',\n  templateUrl: './demo-basics.view.html',\n  styles: [\n    `\n      .list .mat-expansion-panel-header {\n        position: relative;\n      }\n      .list .mat-expansion-panel-header mat-progress-bar {\n        position: absolute;\n        top: 0px;\n        left: 0;\n      }\n\n      .list .mat-expansion-panel-content .mat-expansion-panel-body {\n        padding-top: 10px;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [DemoBasicsViewModelService, DemoBasicsAdapterService],\n})\nexport class DemoBasicsComponent extends RxState<any> {\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    this.vm.set({ refreshInterval });\n  }\n\n  constructor(\n    public vm: DemoBasicsViewModelService,\n    private ca: DemoBasicsAdapterService\n  ) {\n    super();\n\n    this.vm.connect('list', this.ca.list$);\n    this.vm.connect('isPending', this.ca.loadingSignal$);\n    this.hold(this.vm.refreshListSideEffect$, (_) => this.ca.refetchList());\n  }\n}\n","<h3>Final Example</h3>\n<br />\n<mat-expansion-panel\n  class=\"list\"\n  *ngIf=\"vm.baseModel$ | async as bm\"\n  (expandedChange)=\"vm.listExpandedChanges.next($event)\"\n  [expanded]=\"bm.listExpanded\"\n>\n  <mat-expansion-panel-header style=\"position: relative;\">\n    <mat-progress-bar *ngIf=\"bm.isPending\" [mode]=\"'query'\"></mat-progress-bar>\n    <mat-panel-title>User Name</mat-panel-title>\n    <mat-panel-description>\n      <span *ngIf=\"!bm.listExpanded\"\n        >{{bm.list.length}} Repositories Updated every: {{bm.refreshInterval}}\n        ms\n      </span>\n      <span *ngIf=\"bm.listExpanded\">{{bm.list.length}}</span>\n    </mat-panel-description>\n  </mat-expansion-panel-header>\n\n  <!-- NOTE: in the view the only variable we want to touch is `vm`-->\n  <button\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"vm.refreshClicks.next($event)\"\n  >\n    Refresh List\n  </button>\n\n  <div *ngIf=\"bm.list.length; else noList\">\n    <mat-list>\n      <mat-list-item *ngFor=\"let item of bm.list\">\n        {{item.name}}\n      </mat-list-item>\n    </mat-list>\n  </div>\n\n  <ng-template #noList>\n    <mat-card>No list given!</mat-card>\n  </ng-template>\n</mat-expansion-panel>\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { interval, Subject, Subscription } from 'rxjs';\n//👇 Import { map }\nimport { map, startWith, tap } from 'rxjs/operators';\nimport { ListServerItem, ListService } from '../data-access/list-resource';\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  refreshInterval: number;\n  list: DemoBasicsItem[];\n  listExpanded: boolean;\n}\n\nconst initComponentState = {\n  refreshInterval: 10000,\n  listExpanded: false,\n  list: [],\n};\n\n@Component({\n  selector: 'rxa-output-bindings-start',\n  template: `\n    <h3>\n      Output Bindings\n    </h3>\n    <!--👇 Refactor the state binding -->\n    <mat-expansion-panel\n      *ngIf=\"model$ | async as vm\"\n      (expandedChange)=\"listExpanded = $event; listExpandedChanges.next($event)\"\n      [expanded]=\"listExpanded\"\n    >\n      <mat-expansion-panel-header class=\"list\">\n        <mat-progress-bar *ngIf=\"false\" [mode]=\"'query'\"></mat-progress-bar>\n        <mat-panel-title>\n          List\n        </mat-panel-title>\n        <mat-panel-description>\n          <span\n          >{{ (storeList$ | async)?.length }} Repositories Updated every:\n            {{ vm.refreshInterval }} ms\n          </span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onRefreshClicks($event)\"\n      >\n        Refresh List\n      </button>\n\n      <ng-container *ngIf=\"storeList$ | async as list\">\n        <div *ngIf=\"list?.length; else noList\">\n          <mat-list>\n            <mat-list-item *ngFor=\"let item of list\">\n              {{ item.name }}\n            </mat-list-item>\n          </mat-list>\n        </div>\n      </ng-container>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OutputBindingsStart extends RxState<ComponentState>\n  implements OnInit, OnDestroy {\n  model$ = this.select();\n\n  intervalSubscription = new Subscription();\n  listExpandedChanges = new Subject<boolean>();\n  storeList$ = this.listService.list$.pipe(\n    map(this.parseListItems),\n    startWith(initComponentState.list)\n  );\n\n  @Input()\n  set refreshInterval(refreshInterval: number) {\n    if (refreshInterval > 4000) {\n      this.set({ refreshInterval });\n      this.resetRefreshTick();\n    }\n  }\n\n  listExpanded: boolean = initComponentState.listExpanded;\n  @Output()\n  listExpandedChange = this.listExpandedChanges;\n  //👇 Connect an observable to the state\n  constructor(private listService: ListService) {\n    super();\n    this.set(initComponentState);\n  }\n\n  ngOnDestroy(): void {\n    this.intervalSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.resetRefreshTick();\n  }\n\n  resetRefreshTick() {\n    this.intervalSubscription.unsubscribe();\n    this.intervalSubscription = interval(this.get('refreshInterval'))\n      .pipe(tap((_) => this.listService.refetchList()))\n      .subscribe();\n  }\n\n  onRefreshClicks(event) {\n    this.listService.refetchList();\n  }\n\n  parseListItems(l: ListServerItem[]): DemoBasicsItem[] {\n    return l.map(({ id, name }) => ({ id, name }));\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Adapter } from \"./adapter\";\nimport { Presenter } from \"./presenter\";\n\nexport interface DemoBasicsItem {\n  id: string;\n  name: string;\n}\n\n@Component({\n  selector: 'rxa-presenter-pattern-solution',\n  template: `\n    <h3>Presenter Pattern</h3>\n    <mat-expansion-panel\n      *ngIf=\"ps.vm$ | async as m\"\n      (expandedChange)=\"ps.listExpandedChanges.next($event)\"\n      [expanded]=\"m.listExpanded\"\n    >\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          User Name\n        </mat-panel-title>\n        <mat-panel-description>\n          <span *ngIf=\"!m.listExpanded\"\n          >{{ m.list.length }} Repositories Updated every:\n            {{ m.refreshInterval }} ms</span\n          >\n          <span *ngIf=\"m.listExpanded\">{{ m.list.length }}</span>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"ps.refreshClicks.next($event)\"\n      >\n        Refresh List\n      </button>\n\n      <div *ngIf=\"m.list.length; else noList\">\n        <mat-list>\n          <mat-list-item *ngFor=\"let item of m.list\">\n            {{ item.name }}\n          </mat-list-item>\n        </mat-list>\n      </div>\n\n      <ng-template #noList>\n        <mat-card>No list given!</mat-card>\n      </ng-template>\n    </mat-expansion-panel>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [Presenter, Adapter]\n})\nexport class PresenterPatternSolution extends RxState<any> {\n\n  @Input()\n  set refreshInterval(refreshInterval$: Observable<number>) {\n    this.ps.connect('refreshInterval', refreshInterval$.pipe(\n      filter(i => i > 100)\n    ));\n  }\n\n  constructor(\n    public ps: Presenter,\n    public ad: Adapter\n  ) {\n    super();\n    this.ps.connect('list', this.ad.list$);\n    this.hold(this.ps.refreshListTrigger$, this.ad.refresh);\n  }\n}\n"],"sourceRoot":"webpack:///"}