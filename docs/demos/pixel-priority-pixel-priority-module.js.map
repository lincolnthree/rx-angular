{"version":3,"sources":["./apps/demos/src/app/shared/image-array/palette-extractors/kmeans.extractor.ts","./apps/demos/src/app/shared/image-array/palette-extractors/index.ts","./apps/demos/src/app/shared/image-array/image-converter.ts","./apps/demos/src/app/shared/canvas-view/canvas-view.module.ts","./apps/demos/src/app/features/template/strategies/pixel-priority/pixel-priority.module.ts","./apps/demos/src/app/features/template/strategies/pixel-priority/pixel-priority.component.ts","./apps/demos/src/app/shared/canvas-view/canvas-view.component.ts","./apps/demos/src/app/shared/image-array/index.ts"],"names":[],"mappings":"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","file":"pixel-priority-pixel-priority-module.js","sourcesContent":["import { computeAverageColor } from '../pixel-image';\nimport { RGBA, RGBAs } from '../model';\n\nconst RERUN_COUNT = 10;\n\ntype Clusters = RGBA[][];\ntype Groups = RGBA[][];\ntype Means = RGBA[];\n\ninterface ClusterResult {\n  means: Means\n  clusters: Clusters,\n  error: number\n}\n\ninterface MeanResult {\n  means: Means,\n  groups: Groups,\n  error: number\n}\n\ninterface KMeansResult {\n  clusters: Clusters,\n  error: number\n}\n\nclass KMeansRunner {\n\n  palette(result: KMeansResult): RGBAs {\n    // tslint:disable-next-line:no-bitwise\n    return result.clusters.map(rgba => computeAverageColor(rgba).map(v => ~~v) as RGBA)\n  }\n\n  run(k: number, pixels: RGBAs): KMeansResult {\n    let clusters = null;\n    let error = Infinity;\n\n    // re-run several times and keep the best result\n    for (let attempt = 0; attempt < RERUN_COUNT; attempt++) {\n      const result = this.cluster(pixels, k);\n      if (result.error < error) {\n        clusters = result.clusters;\n        error = result.error;\n      }\n    }\n\n    return {\n      clusters: clusters,\n      error: error\n    };\n  }\n\n  cluster(pixels: RGBAs, k: number): ClusterResult {\n    // randomly initialize means\n    let means = [];\n    for (let i = 0; i <= k; i++) {\n      const pixel = pixels[Math.floor(Math.random() * pixels.length)];\n      means.push(pixel);\n    }\n\n    let done = false;\n    let result: MeanResult = null;\n    while (!done) {\n      /* console.log(\"iterating...\");*/\n      result = this.groupPointsByMeans(means, pixels);\n      const newMeans = this.computeMeans(result.groups);\n      done = this.isDone(means, newMeans);\n      means = newMeans;\n    }\n    /* console.log(\"DONE ===========================\");*/\n    return {\n      clusters: result.groups,\n      error: result.error,\n      means: result.means\n    };\n  }\n\n  computeMeans(groups: Groups): RGBAs {\n    return groups.map((group) => {\n      return computeAverageColor(group);\n    });\n  }\n\n  isDone(meansA: Means, meansB: Means): boolean {\n    let result = false;\n    meansA.forEach((mean) => {\n      let meanIsAlsoInMeansB = false;\n      meansB.forEach((otherMean) => {\n        if ((mean[0].toFixed(2) === otherMean[0].toFixed(2)) &&\n          (mean[1].toFixed(2) === otherMean[1].toFixed(2)) &&\n          (mean[2].toFixed(2) === otherMean[2].toFixed(2))) {\n          meanIsAlsoInMeansB = true;\n        }\n      });\n      // @ts-ignore\n      // tslint:disable-next-line:no-bitwise\n      result |= meanIsAlsoInMeansB;\n    });\n    return result;\n  }\n\n  groupPointsByMeans(means: Means, pixels: RGBAs): MeanResult {\n    let totalError = 0;\n    const groups = new Array(means.length).fill([]);\n\n    pixels.forEach((pixel) => {\n      let bestGroupIndex;\n      let bestGroupError = Infinity;\n\n      means.forEach((mean, index) => {\n        const error = this.distance([pixel[0], pixel[1], pixel[2]], [mean[0], mean[1], mean[2]]);\n        if (error < bestGroupError) {\n          bestGroupError = error;\n          bestGroupIndex = index;\n        }\n      });\n      groups[bestGroupIndex].push(pixel);\n      totalError += bestGroupError;\n    });\n    return {\n      means: means,\n      groups: groups,\n      error: totalError\n    };\n  }\n\n  distance(pointA, pointB): number {\n    const squaredDiffs = pointA.map((dim, index) => {\n      const diff = pointA[index] - pointB[index];\n      return diff * diff;\n    });\n    return Math.sqrt(squaredDiffs.reduce((s, n) => s + n, 0));\n  }\n\n}\n\nexport const kMeansRunner = new KMeansRunner();\n","export {kMeansRunner} from './kmeans.extractor';\n","import { animationFrameScheduler, asyncScheduler, BehaviorSubject, Observable, Subject, Subscription } from 'rxjs';\nimport { ImgInfo } from './model';\nimport { map, observeOn, shareReplay, tap } from 'rxjs/operators';\nimport { imageDataToImgInfo } from './pixel-image';\n\nexport interface ImgConverter {\n  tearDown: () => void,\n  renderImage: (img: CanvasImageSource) => void,\n  rotate: (angle: number, x: number, y: number) => void,\n  scale: (image: HTMLImageElement, scalex: number, scaley: number) => void,\n  imageDataChange$: Observable<ImageData>,\n  loading$: Observable<boolean>,\n  imgInfoChange$: Observable<ImgInfo>\n}\n\nexport function createImageConverter(canvas?: HTMLCanvasElement): ImgConverter {\n  canvas = canvas || document.createElement('CANVAS') as HTMLCanvasElement;\n  // FileReader support\n  if (!FileReader) {\n    throw new Error('No FileReader supported.');\n  }\n  const TO_RADIANS = Math.PI / 180;\n\n  const sub = new Subscription();\n  const ctx: CanvasRenderingContext2D = canvas.getContext('2d');\n  const loading$ = new BehaviorSubject<boolean>(false);\n  const imageDataChange$ = new Subject<ImageData>();\n\n  const renderImage$ = new Subject<HTMLImageElement>();\n\n  sub.add(renderImage$.pipe(\n    observeOn(animationFrameScheduler),\n    tap(img => renderImage(img))\n  ).subscribe());\n\n  return {\n    tearDown: () => sub.unsubscribe(),\n    renderImage: (img: HTMLImageElement) => renderImage$.next(img),\n    rotate,\n    scale,\n    loading$,\n    imageDataChange$,\n    imgInfoChange$: imageDataChange$.pipe(\n      tap(() => loading$.next(true)),\n      map(imageDataToImgInfo),\n      observeOn(asyncScheduler),\n      tap(() => loading$.next(false)),\n      shareReplay(1)\n    )\n  };\n\n  // ---\n\n  function rotate(angle: number, x: number, y: number) {\n    const image = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    x = x || image.width / 2;\n    y = y || image.height / 2;\n\n    // save the current co-ordinate system\n    // before we screw with it\n    ctx.save();\n\n    // move to the middle of where we want to draw our image\n    ctx.translate(x, y);\n\n    // rotate around that point, converting our\n    // angle from degrees to radians\n    ctx.rotate(angle * TO_RADIANS);\n\n    // draw it up and to the left by half the width\n    // and height of the image\n    ctx.drawImage(image as any, -(x), -(y));\n\n    // and restore the co-ords to how they were when we began\n    ctx.restore();\n\n    _signalImageDataUpdate();\n  }\n\n  function scale(image: HTMLImageElement, scalex: number, scaley: number) {\n    const imgwidth = image.width;\n    const imgheight = image.height;\n    canvas.width = imgwidth * scalex;\n    canvas.height = imgheight * scaley;\n    ctx.scale(scalex, scaley);\n    ctx.drawImage(image, 0, 0);\n    _signalImageDataUpdate();\n  }\n\n  function renderImage(img) {\n    canvas.width = img.width;\n    canvas.height = img.height;\n    ctx.drawImage(img, 0, 0);\n    _signalImageDataUpdate();\n  }\n\n  // ---\n\n  function _signalImageDataUpdate() {\n    imageDataChange$.next(ctx.getImageData(0, 0, canvas.width, canvas.height));\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CanvasViewComponent } from './canvas-view.component';\n\n\n@NgModule({\n  declarations: [CanvasViewComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [CanvasViewComponent]\n})\nexport class CanvasViewModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PixelPriorityComponent } from './pixel-priority.component';\nimport { VisualizerModule } from '../../../../shared/debug-helper/visualizer';\nimport { ImageArrayModule } from '../../../../shared/image-array/image-array.module';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { SiblingModule } from '../../../../shared/template-structures/sibling/sibling.module';\nimport { RouterModule } from '@angular/router';\nimport { LetModule, PushModule } from 'templateAlpha0';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSelectModule } from '@angular/material/select';\nimport { CanvasViewModule } from '../../../../shared/canvas-view/canvas-view.module';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { UnpatchEventsModule } from '../../../../rx-angular-pocs/template/directives/unpatch';\n\n\n@NgModule({\n  declarations: [PixelPriorityComponent],\n  imports: [\n    CommonModule,\n    VisualizerModule,\n    ImageArrayModule,\n    RouterModule.forChild([{\n      path: '',\n      component: PixelPriorityComponent\n    }]),\n    MatCheckboxModule,\n    SiblingModule,\n    LetModule, PushModule, UnpatchEventsModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatListModule,\n    MatSelectModule,\n    CanvasViewModule,\n    MatProgressBarModule\n  ]\n})\nexport class PixelPriorityModule {\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { createImageConverter } from '../../../../shared/image-array';\nimport { computeColorPrio } from '../../../../shared/image-array/pixel-image';\nimport { RxEffects } from '../../../../shared/rx-effects.service';\n\n@Component({\n  selector: 'rxa-concurrent-strategies',\n  template: `\n    <rxa-visualizer>\n      <ng-container visualizerHeader>\n        <h1 class=\"mat-headline\">Pixels with priorities</h1>\n        <rxa-image-array (img)=\"imgChange$.next($event)\" class=\"mb-2\"></rxa-image-array>\n      </ng-container>\n      <div class=\"w-100 d-flex flex-wrap\">\n        <div class=\"w-100 mb-2\">\n          <mat-progress-bar *ngIf=\"imgConverter?.loading$ | push\" [mode]=\"'buffer'\"></mat-progress-bar>\n\n          <rxa-color-prio class=\"w-100\" [colors$]=\"colors$\"></rxa-color-prio>\n        </div>\n        <div class=\"w-100 d-flex flex-fill mb-5\">\n          <div class=\"d-flex flex-wrap mr-2\" style=\"width: 300px\">\n            <rxa-canvas-view style=\"width: 100px\" [img$]=\"imgChange$\"></rxa-canvas-view>\n\n            <mat-form-field class=\"mr-2 w-100\" *rxLet=\"pixelSize$; let size\">\n              <mat-label>Pixel Size {{size}}</mat-label>\n              <input matInput [unpatch] #i type=\"number\"\n                     (input)=\"pixelSize$.next(i.value)\" [value]=\"size\">\n            </mat-form-field>\n            <mat-form-field class=\"mr-2 w-100\" *rxLet=\"fillColor$; let fillColor\">\n              <mat-label>Overlay Color {{fillColor}}</mat-label>\n              <input matInput [unpatch] #i type=\"color\" [value]=\"fillColor\"\n                     (input)=\"fillColor$.next(i.value)\">\n            </mat-form-field>\n            <button *rxLet=\"pixelArray$; let a\" style=\"width: 200px\" mat-raised-button color=\"primary\" [unpatch]\n                    (click)=\"filled$.next(!filled$.getValue())\">\n              Repaint {{a?.length}} Components\n            </button>\n          </div>\n          <div>\n            <rxa-sibling-pixel-img\n              [pixelSize]=\"pixelSize$\"\n              [imgInfo]=\"imgInfoChange$\"\n              [filled]=\"filled$\"\n              [fillColor]=\"fillColor$\">\n            </rxa-sibling-pixel-img>\n          </div>\n        </div>\n      </div>\n    </rxa-visualizer>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [RxEffects]\n})\nexport class PixelPriorityComponent {\n  selectedStrategies: { [name: string]: boolean } = {};\n\n  filled$ = new BehaviorSubject<boolean>(true);\n  fillColor$ = new BehaviorSubject<string>('#ff0000');\n  pixelSize$ = new BehaviorSubject<string>('3');\n\n  imgChange$ = new Subject<HTMLImageElement>();\n  imgConverter = createImageConverter();\n  imgInfoChange$ = this.imgConverter.imgInfoChange$;\n  colors$ = this.imgInfoChange$.pipe(map(r => computeColorPrio(r.colors)));\n  pixelArray$ = this.imgInfoChange$.pipe(map(d => d.pixelArray));\n\n  constructor(public rxEf: RxEffects) {\n    this.rxEf.hold(this.imgChange$, (img: CanvasImageSource) => this.imgConverter.renderImage(img));\n  }\n\n  visible(choice) {\n    return this.selectedStrategies[choice] === true;\n  }\n\n}\n","import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { Hooks } from '../debug-helper/hooks';\nimport { Observable } from 'rxjs';\nimport { RxState } from '@rx-angular/state';\n\n@Component({\n  selector: 'rxa-canvas-view',\n  template: `\n    <div #display>\n      <!-- canvas bootstrapped here-->\n    </div>\n  `,\n  host: {\n    class: 'd-block w-100'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [RxState]\n})\nexport class CanvasViewComponent extends Hooks {\n\n  canvas: HTMLCanvasElement;\n\n  @Input()\n  set img$(img$: Observable<HTMLImageElement>) {\n    this.rxState.connect('img', img$);\n  }\n\n  @ViewChild('display')\n  display;\n\n  constructor(\n    private elemRef: ElementRef,\n    private rxState: RxState<{ img: HTMLImageElement }>\n  ) {\n    super();\n    this.rxState.hold(this.afterViewInit$, () => {\n      this.setupCanvas(this.display.nativeElement, 50, 50);\n    });\n    this.rxState.hold(this.rxState.select('img'), (img) => {\n      this.canvas.width = img.width;\n      this.canvas.height = img.height;\n      this.canvas.getContext('2d').drawImage(img, 0, 0);\n    });\n  }\n\n  setupCanvas(parent: HTMLElement, w: number, h: number) {\n    this.canvas = document.createElement('canvas') as HTMLCanvasElement;\n    this.canvas.width = w;\n    this.canvas.height = h;\n    this.canvas.className = 'pixel-canvas';\n    parent.appendChild(this.canvas);\n  }\n\n}\n","export { kMeansRunner } from './palette-extractors';\nexport {RGBA, RGBAs, ImgInfo} from './model';\nexport {createImageConverter, ImgConverter} from './image-converter';\n"],"sourceRoot":"webpack:///"}