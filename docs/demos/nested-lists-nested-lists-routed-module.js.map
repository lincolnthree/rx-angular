{"version":3,"sources":["./apps/demos/src/app/features/template/rx-for/nested-lists/nested-lists.routed.module.ts","./apps/demos/src/app/features/template/rx-for/nested-lists/nested-lists.component.ts","./apps/demos/src/app/shared/debug-helper/value-provider/index.ts","./apps/demos/src/app/features/template/rx-for/nested-lists/rx-for-value.component.ts","./apps/demos/src/app/features/template/rx-for/nested-lists/rx-for-normal.directive.ts","./apps/demos/src/app/features/template/rx-for/nested-lists/utils.ts","./apps/demos/src/app/shared/utils/utils.module.ts","./apps/demos/src/app/shared/debug-helper/value-provider/model.ts","./apps/demos/src/app/features/template/rx-for/nested-lists/nested-lists.module.ts","./apps/demos/src/app/shared/utils/to-array.pipe.ts","./apps/demos/src/app/shared/debug-helper/visualizer/index.ts","./apps/demos/src/app/features/template/rx-for/nested-lists/nested-lists.routes.ts","./apps/demos/src/app/features/template/rx-for/nested-lists/rx-for-minimal.directive.ts"],"names":[],"mappings":"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","file":"nested-lists-nested-lists-routed-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { ROUTES } from './nested-lists.routes';\nimport { NestedListsModule } from './nested-lists.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(ROUTES),\n    NestedListsModule\n  ]\n})\nexport class NestedListsRoutedModule {\n}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  QueryList,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { RxStrategyProvider } from '@rx-angular/cdk';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  EMPTY,\n  interval,\n  merge,\n  of,\n  Subject,\n} from 'rxjs';\nimport { scan, share, switchMap, tap } from 'rxjs/operators';\nimport { RxState } from '@rx-angular/state';\nimport { environment } from '../../../../../environments/environment';\nimport { immutableArr } from './utils';\n\n@Component({\n  selector: 'rxa-rx-for-nested-lists',\n  template: `\n    <rxa-visualizer>\n      <ng-container visualizerHeader>\n        <h2>Nested Lists</h2>\n        <div>\n          <p *rxLet=\"table$; let table; patchZone: false\">\n            <mat-form-field>\n              <mat-label>Rows</mat-label>\n              <input\n                matInput\n                min=\"1\"\n                #r\n                type=\"number\"\n                unpatch\n                [value]=\"table?.rows + ''\"\n                (input)=\"set({ rows: +r.value })\"\n              />\n            </mat-form-field>\n            <mat-form-field>\n              <mat-label>Columns</mat-label>\n              <input\n                matInput\n                min=\"1\"\n                #c\n                type=\"number\"\n                unpatch\n                [value]=\"table?.columns + ''\"\n                (input)=\"set({ columns: +c.value })\"\n              />\n            </mat-form-field>\n          </p>\n          <mat-button-toggle-group\n            name=\"visibleExamples\"\n            aria-label=\"Visible Examples\"\n            [value]=\"displayStates.all\"\n            #group=\"matButtonToggleGroup\"\n          >\n            <mat-button-toggle [value]=\"displayStates.native\"\n              >*ngFor</mat-button-toggle\n            >\n            <mat-button-toggle [value]=\"displayStates.rxAngularReactive2\"\n              >*rxFor\n            </mat-button-toggle>\n            <mat-button-toggle [value]=\"displayStates.all\"\n              >All</mat-button-toggle\n            >\n          </mat-button-toggle-group>\n          <br />\n        </div>\n      </ng-container>\n\n      <div class=\"row w-100\">\n        <!--  -->\n        <div\n          class=\"col\"\n          *ngIf=\"\n            group.value === displayStates.native ||\n            group.value === displayStates.all\n          \"\n        >\n          <h2>*ngFor</h2>\n          <p>\n            <button mat-raised-button (click)=\"changeOneClick$.next(1)\">\n              update\n            </button>\n            <button mat-raised-button (click)=\"changeAllClick$.next(10)\">\n              Change all\n            </button>\n            <button mat-raised-button (click)=\"toggleIntervalClick$.next(10)\">\n              toggle interval\n            </button>\n          </p>\n          <rxa-visualizer\n            viewType=\"embedded-view\"\n            *ngFor=\"let value of array$ | async; trackBy: trackById\"\n          >\n            <ng-container *ngFor=\"let i of value.arr; trackBy: trackById\">\n              <rxa-rx-for-value [value]=\"i\" [strategy$]=\"native$\"></rxa-rx-for-value>\n            </ng-container>\n          </rxa-visualizer>\n        </div>\n        <div\n          class=\"col\"\n          *ngIf=\"\n            group.value === displayStates.rxAngularReactive2 ||\n            group.value === displayStates.all\n          \"\n        >\n          <h2>*rxFor</h2>\n          <p *rxLet=\"table$; let t;\">\n            <button\n              mat-raised-button\n              [unpatch]\n              (click)=\"changeOneClick$.next(1)\"\n            >\n              update\n            </button>\n            <button\n              mat-raised-button\n              [unpatch]\n              (click)=\"changeAllClick$.next(t.changes)\"\n            >\n              Change many\n            </button>\n            <button\n              mat-raised-button\n              [unpatch]\n              (click)=\"toggleIntervalClick$.next(10)\"\n            >\n              toggle interval\n            </button>\n            <rxa-strategy-select [unpatch]=\"['strategyChange']\"\n              (strategyChange)=\"strategy$.next($event)\"\n            ></rxa-strategy-select>\n          </p>\n          <!--\n                 <ng-container *rxLet=\"childrenRendered$; let childrenRendered; strategy: strategy$\">\n                   Rendercallback: <strong>{{ childrenRendered }}</strong>\n                 </ng-container>\n       -->\n          <rxa-visualizer\n            viewType=\"embedded-view\"\n            *rxFor=\"\n              let a of array$;\n              let i;\n              let r$ = item$;\n              strategy: strategy$;\n              trackBy: trackById;\n              parent: true;\n              patchZone: false;\n              let select = select;\n              renderCallback: childrenRendered$\n            \"\n          >\n            <span #spanChild></span>\n            <ng-container\n              *rxFor=\"\n                select(['arr']);\n                strategy: strategy$;\n                trackBy: trackById;\n                 parent: false;\n                patchZone: false;\n                let o;\n                let v$ = item$\n              \"\n            >\n              <rxa-rx-for-value [strategy$]=\"strategy$\" [value]=\"v$\"></rxa-rx-for-value>\n            </ng-container>\n          </rxa-visualizer>\n        </div>\n      </div>\n    </rxa-visualizer>\n  `,\n  changeDetection: environment.changeDetection,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class RxForNestedListsComponent\n  extends RxState<{ rows: number; columns: number; changes: number }>\n  implements AfterViewInit {\n  @ViewChildren('spanChild') spanChildren: QueryList<ElementRef>;\n\n  tK = 'id';\n\n  native$ = of('native');\n\n  displayStates = {\n    none: -1,\n    all: 0,\n    native: 1,\n    nativeReactive: 2,\n    rxAngularReactive: 3,\n    rxAngularReactive2: 4,\n    rxAngularMinimalReactive: 5,\n  };\n\n  childrenRendered = new Subject<string>();\n  private numChildrenRendered = 0;\n  childrenRendered$ = this.childrenRendered\n    .pipe\n    // tap(v => console.log('rcb', v))\n    ();\n  childrenRendered2 = new Subject<string>();\n  private numChildrenRendered2 = 0;\n  childrenRendered2$ = this.childrenRendered2.pipe(\n    tap((v) => console.log('rcb2', v))\n  );\n\n  table$ = this.select();\n\n  strategy$ = new BehaviorSubject<string>(this.strategyProvider.primaryStrategy);\n  changeOneClick$ = new Subject<number>();\n  changeAllClick$ = new Subject<number>();\n  toggleIntervalClick$ = new Subject<number>();\n\n  changesFromTick$ = this.toggleIntervalClick$.pipe(\n    scan((a) => !a, false),\n    switchMap((b) => (b ? interval(100) : EMPTY))\n  );\n\n  array$ = merge(\n    combineLatest([this.changeOneClick$, this.table$]).pipe(\n      switchMap(([_, { rows, columns }]) => immutableArr(rows, columns)(of(1)))\n    ),\n    combineLatest([\n      merge(this.changesFromTick$, this.changeAllClick$),\n      this.table$\n    ]).pipe(\n      switchMap(([_, { rows, columns, changes }]) =>\n        immutableArr(rows, columns)(of(rows))\n      )\n    )\n  ).pipe(share());\n\n  load$ = new BehaviorSubject<number>(0);\n  trackById = (i, v) => v.id;\n\n  dK = (a, b) => a.value === b.value;\n\n  constructor(\n    private strategyProvider: RxStrategyProvider\n  ) {\n    super();\n    this.set({ columns: 5, rows: 10 });\n  }\n\n  ngAfterViewInit() {\n    this.hold(this.spanChildren.changes, console.log);\n  }\n}\n","export * from './utils';\nexport * from './model';\nexport * from './primitives-provider.service';\nexport * from './array-provider.service';\nexport * from './value-provider/value-provider.component';\nexport * from './value-providers.module';\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\nimport { isObservable, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { TestItem, toBoolean } from '../../../../shared/debug-helper/value-provider';\n\n@Component({\n  selector: 'rxa-rx-for-value',\n  template: `\n    <ng-container *rxLet=\"value$; let v;  strategy:strategy$; parent: false; patchZone: false\">\n    <mat-icon class=\"item\" [ngClass]=\"{red:!v, green:v}\">\n      {{v ? 'check' : 'highlight_off'}}\n    </mat-icon>\n    <rxa-dirty-check></rxa-dirty-check>\n    </ng-container>\n  `,\n  styles: [`\n    .item.red {\n      color: red;\n    }\n    .item.green {\n      color: green;\n    }\n    .value.number {\n    }\n    .value.string {\n    }\n    .value.object {\n    }\n    .value.array {\n    }\n  `],\n  host: {\n    class: 'd-flex justify-content-center align-items-center flex-column w-100 m-1 p-1 dh-embedded-view'\n  },\n  providers: [RxState],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RxForValueComponent {\n\n  value$ = this.state.select(map(s => toBoolean(s.item.value, 0.5)));\n\n  @Input()\n  set value(o: Observable<TestItem> | TestItem) {\n    this.state.connect('item', isObservable(o) ? o : of(o));\n  }\n  @Input()\n  strategy$: Observable<string>;\n\n  constructor(public state: RxState<{ item: TestItem }>) { }\n\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  EmbeddedViewRef,\n  Inject,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef\n} from '@angular/core';\nimport { RxDefaultListViewContext, RxStrategyProvider } from '@rx-angular/cdk';\n\nimport {\n  concat,\n  forkJoin,\n  Observable,\n  ObservableInput,\n  of,\n  ReplaySubject,\n  Subject,\n  Subscription\n} from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  switchAll,\n  switchMap,\n  take,\n  tap\n} from 'rxjs/operators';\n\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  // tslint:disable-next-line:directive-selector\n  selector: '[rxForNormal]'\n})\nexport class RxForNormal<T, U extends NgIterable<T> = NgIterable<T>>\n  implements OnInit, OnDestroy {\n  @Input()\n  set rxForNormal(potentialObservable: ObservableInput<U> | null | undefined) {\n    this._rxFor = potentialObservable;\n    this.observables$.next(potentialObservable);\n  }\n\n  @Input()\n  set rxForNormalOf(potentialObservable: ObservableInput<U> | null | undefined) {\n    this._rxFor = potentialObservable;\n    this.observables$.next(potentialObservable);\n  }\n  @Input('rxForNormalRenderCallback') set renderCallback(\n    renderCallback: Subject<void>\n  ) {\n    this._renderCallback = renderCallback;\n  }\n  @Input('rxForNormalStrategy') set strategy(strategy: string) {\n    this._strategy = strategy;\n  }\n  get strategy(): string {\n    return this._strategy || this.strategyProvider.primaryStrategy;\n  }\n  @Input()\n  set rxForNormalTrackBy(fn: TrackByFunction<T>) {\n    this._trackByFn = fn;\n  }\n\n  constructor(\n    private strategyProvider: RxStrategyProvider,\n    private cdRef: ChangeDetectorRef,\n    private readonly templateRef: TemplateRef<RxDefaultListViewContext<T, U>>,\n    private readonly viewContainerRef: ViewContainerRef,\n    private iterableDiffers: IterableDiffers\n  ) {}\n\n\n  private differ: IterableDiffer<T> | null = null;\n  private observables$ = new ReplaySubject<ObservableInput<U>>(1);\n  private readonly strategies = this.strategyProvider.strategies;\n  values$ = this.observables$.pipe(\n    switchAll(),\n    distinctUntilChanged(),\n    shareReplay({ refCount: true, bufferSize: 1 })\n  );\n  private _rxFor: ObservableInput<U> | null | undefined;\n\n  // true if affects view\n  // private readonly __renderCallback = new Subject<any>();\n  private _renderCallback: Subject<any>;\n\n  /* private readonly strategyName$ = new ReplaySubject<Observable<string>>(1);\n   private readonly strategy$: Observable<RxStrategyCredentials> = strategyName$.pipe(\n   ngInputFlatten(),\n   startWith(this.defaultStrategyName),\n   nameToStrategyCredentials(this.strategies, cfg.defaultStrategyName)\n   );*/\n\n  // TODO: handle observable as strategy input\n  private _strategy: string;\n\n  private _trackByFn;\n\n  private sub = new Subscription();\n\n  /**\n   * Asserts the correct type of the context for the template that `NgForOf` will render.\n   *\n   * The presence of this method is a signal to the Ivy template type-check compiler that the\n   * `NgForOf` structural directive renders its template with a specific context type.\n   */\n  static ngTemplateContextGuard<T, U extends NgIterable<T>>(\n    dir: RxForNormal<T, U>,\n    ctx: any\n  ): ctx is RxDefaultListViewContext<T, U> {\n    return true;\n  }\n\n  @Input()\n  rxForDistinctBy = (a, b) => a.value === b.value;\n\n  initDiffer(iterable: U = [] as U) {\n    this.differ = this.iterableDiffers\n      .find(iterable)\n      .create(this._trackByFn);\n  }\n\n  ngOnInit() {\n    this.sub.add(\n      concat(\n        this.values$.pipe(\n          take(1),\n          tap(value => this.initDiffer(value || ([] as any)))\n        ),\n        this.values$\n      )\n        .pipe(\n          map(i => this.differ.diff(i)),\n          filter(diff => !!diff),\n          switchMap(diff => this.applyChanges(diff)),\n          catchError(e => {\n            console.error(e);\n            return of(null);\n          }),\n          tap(this?._renderCallback)\n        )\n        .subscribe()\n    );\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.viewContainerRef.clear();\n  }\n\n  private applyChanges(changes: IterableChanges<T>): Observable<any[]> {\n    let detectParent = false;\n    const behaviors$: Observable<any>[] = [];\n    const strat = this.strategies[this.strategy];\n\n    const insertMap = new Map<number, RxDefaultListViewContext<T, U>>();\n    const scheduleInsert = (idx: number, ctx: RxDefaultListViewContext<T, U>) => {\n      if (!insertMap.has(idx)) {\n        insertMap.set(idx, ctx);\n        const insert = new Subject<void>();\n        const work = () => {\n          try {\n            const view = this.viewContainerRef.createEmbeddedView(\n              this.templateRef,\n              insertMap.get(idx),\n              idx\n            );\n            strat.work(view);\n          } catch (e) {\n            // console.error(e);\n            // console.error('destroyed', this.destroyed);\n          }\n        };\n        this.sub.add(\n          of(null)\n            .pipe(strat.behavior(work, insertMap.get(idx)), take(1))\n            .subscribe(insert)\n        );\n        behaviors$.push(insert);\n      }\n    };\n    const updateMap = new WeakMap<\n      EmbeddedViewRef<any>,\n      ((context: RxDefaultListViewContext<T, U>) => void)[]\n      >();\n    const scheduleUpdate = (\n      idx: number,\n      update: (context: RxDefaultListViewContext<T, U>) => void\n    ) => {\n      const view = this.viewContainerRef.get(idx) as EmbeddedViewRef<any>;\n      if (view) {\n        if (updateMap.has(view)) {\n          updateMap.get(view).push(update);\n          // update(updateMap.get(view));\n        } else {\n          view.detach();\n          updateMap.set(view, [update]);\n          // detach the view so that the parent cd cycle does not render this view\n          const work = () => {\n            view.reattach();\n            updateMap.get(view).forEach(u => u(view.context));\n            strat.work(view);\n          };\n          behaviors$.push(\n            of(null).pipe(strat.behavior(work, view), take(1))\n          );\n        }\n      } else if (insertMap.has(idx)) {\n        update(insertMap.get(idx));\n      }\n    };\n\n    changes.forEachOperation(\n      (\n        r: IterableChangeRecord<T>,\n        previousIndex: number | null,\n        currentIndex: number | null\n      ) => {\n        const idx = currentIndex == null ? undefined : currentIndex;\n        // insert\n        if (r.previousIndex == null) {\n          const context = new RxDefaultListViewContext(r.item);\n          // console.log('scheduleInsert', idx);\n          scheduleInsert(idx, context);\n          // the view got inserted, so the parent has to get notified about this change\n          detectParent = true;\n        } else if (currentIndex == null) {\n          // remove\n          const i =\n            previousIndex === null ? undefined : previousIndex;\n          if (this.viewContainerRef.get(i)) {\n            this.viewContainerRef.remove(i);\n            // a view got removed, notify parent about the change\n            detectParent = true;\n          }\n        } else if (previousIndex !== null) {\n          // move\n          const view = <EmbeddedViewRef<RxDefaultListViewContext<T, U>>>(\n            this.viewContainerRef.get(previousIndex)\n          );\n          this.viewContainerRef.move(view, idx);\n          const $implicit = r.item;\n          scheduleUpdate(idx, ctx => {\n            ctx.$implicit = $implicit;\n          });\n        }\n      }\n    );\n    // if views only had identityChanges, update the $implict value\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const $implicit = record.item;\n      scheduleUpdate(\n        record.currentIndex,\n        ctx => (ctx.$implicit = $implicit)\n      );\n    });\n    // update view contexts (index, count, odd/even and stuff)\n    const count = this.viewContainerRef.length + insertMap.size;\n    for (const [index] of insertMap.entries()) {\n      const even = index % 2 === 0;\n      const newCtx = {\n        index,\n        count,\n        first: index === 0,\n        last: index === count - 1,\n        even,\n        odd: !even\n      };\n      scheduleUpdate(index, ctx => {\n        ctx.updateContext(newCtx);\n      });\n    }\n    for (let index = 0; index < this.viewContainerRef.length; index++) {\n      const even = index % 2 === 0;\n      const newCtx = {\n        index,\n        count,\n        first: index === 0,\n        last: index === count - 1,\n        even,\n        odd: !even\n      };\n      scheduleUpdate(index, ctx => {\n        ctx.updateContext(newCtx);\n      });\n    }\n    if (detectParent) {\n      Promise.resolve().then(() => {\n        this.strategyProvider.scheduleCD(this.cdRef, {\n          afterCD: () => {\n            // console.log('parent notified');\n          },\n          strategy: this.strategy,\n          scope: (this.cdRef as any).context\n        });\n      });\n    }\n    return forkJoin(behaviors$);\n  }\n\n}\n","import { Observable } from 'rxjs';\nimport { map, scan, share, tap } from 'rxjs/operators';\nimport { toInt } from '../../../../shared/debug-helper/value-provider';\n\nconst children1 = 10;\nconst children2 = 3;\n\nexport const rand = (n: number = 2): number => {\n  // tslint:disable-next-line:no-bitwise\n  return ~~(Math.random() * n);\n};\n\nexport const randArray = (items: number = children1): any[] => {\n  return Array(items).fill(0).map((_, idx) => ({ id: idx % items, value: rand() }));\n};\n\nexport const immutableIncArr = (rows: number = children1, columns: number = children2) => (o$: Observable<number>) => o$.pipe(\n  scan((a, i, idx) => {\n    const arr = randArray(children2);\n    const value = rand(100);\n    if(i === 1) {\n      a[idx % rows] = { id: idx % rows, value, arr };\n    } else if(i === 0) {\n      const id = rand(1);\n      a[id] = { id, value, arr };\n    } else {\n      a.splice(idx % rows, 1);\n    }\n    return a;\n  }, []),\n  tap(console.log),\n  share()\n);\nexport const mutableIncArr = (rows: number = children1, columns: number = children2) => {\n  return (o$: Observable<number>) => o$.pipe(\n    scan((a, i, idx) => {\n      const arr = randArray(children2);\n      a[idx % rows].value = rand();\n      a[idx % rows].arr = arr;\n      return a;\n    }, []),\n    share()\n  );\n}\n\nexport const immutableArr = (rows: number = children1, columns: number = children2) => (o$: Observable<number>) => o$.pipe(\n  map(() => randArray(rows).map((r) => toInt(1) ? ({ ...r, arr: randArray(columns) }) : r) ),\n  share()\n);\n\nexport const mutableArr = (rows: number = children1, columns: number = children2) => {\n  const arr = Array(rows);\n  return (o$: Observable<number>) => o$.pipe(\n    map(v => arr.forEach((i, idx) => {\n      i.value = rand();\n      i.arr = randArray(children2);\n    })),\n    share()\n  );\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ToArrayPipe } from './to-array.pipe';\n\n\n@NgModule({\n  declarations: [ToArrayPipe],\n  imports: [\n    CommonModule\n  ],\n  exports: [ToArrayPipe]\n})\nexport class UtilsModule { }\n","export enum SchedulingPriority {\n  sync,\n  animationFrame,\n  Promise,\n  setTimeout,\n  setInterval,\n  postMessage,\n  idleCallback,\n  userBlocking,\n  userVisible,\n  background\n}\n\n\nexport interface TestItem {\n  id: number;\n  value: number;\n  array?: TestItem[];\n}\n\nexport interface ProvidedValues {\n  random: number;\n  array: TestItem[];\n}\n\n/**\n * id: newIndex\n */\nexport interface Positions {\n  [id: number]: number\n}\n\nexport interface SchedulerConfig {\n  scheduler: SchedulingPriority;\n  duration?: number;\n  numEmissions?: number;\n  tickSpeed?: number|number[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { VisualizerModule } from '../../../../shared/debug-helper/visualizer';\nimport { UnpatchEventsModule } from '@rx-angular/template';\nimport { MatButtonModule } from '@angular/material/button';\nimport { DirtyChecksModule } from '../../../../shared/debug-helper/dirty-checks';\nimport { ValueModule } from '../../../../shared/debug-helper/work';\nimport { RxForNestedListsComponent } from './nested-lists.component';\nimport { RxMinimalForOf } from './rx-for-minimal.directive';\nimport { RxForValueComponent } from './rx-for-value.component';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { StrategySelectModule } from '../../../../shared/debug-helper/strategy-select';\nimport { PushModule, RxForModule, RxLetModule } from '../../../../rx-angular-pocs';\nimport { RxForNormal } from './rx-for-normal.directive';\n\nconst DECLARATIONS = [\n  RxForNestedListsComponent,\n  RxMinimalForOf,\n  RxForNormal,\n  RxForValueComponent\n];\n\n@NgModule({\n  declarations: DECLARATIONS,\n  imports: [\n    CommonModule,\n    VisualizerModule,\n    UnpatchEventsModule,\n    MatButtonModule,\n    DirtyChecksModule,\n    ValueModule,\n    MatButtonToggleModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    RxLetModule,\n    RxForModule,\n    StrategySelectModule,\n    PushModule\n  ],\n  exports: DECLARATIONS\n})\nexport class NestedListsModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'toArray'\n})\nexport class ToArrayPipe implements PipeTransform {\n  transform(value: number | string): any[] {\n    if (typeof value === 'number') {\n      return new Array(value).fill(0).map((_, idx) => idx);\n    }\n    return value != null ? value.toString().split('') : [];\n  }\n}\n","export {VisualizerModule} from './visualizer.module';\nexport {VisualizerComponent} from './visualizer/visualizer.component';\n","import { Routes } from '@angular/router';\nimport { RxForNestedListsComponent } from './nested-lists.component';\n\nexport const ROUTES: Routes = [\n  {\n    path: '',\n    component: RxForNestedListsComponent\n  }\n];\n","import {\n  ChangeDetectorRef,\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { BehaviorSubject, defer, Observable, ObservableInput, ReplaySubject } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  groupBy,\n  map, mergeAll,\n  mergeMap, pluck,\n  scan, share,\n  shareReplay,\n  startWith,\n  switchAll,\n  take,\n  tap\n} from 'rxjs/operators';\nimport { RxEffects } from '../../../../shared/rx-effects.service';\n\ntype RxForTemplateNames = 'rxSuspense' | 'rxNext' | 'rxError' | 'rxComplete';\n\nexport class RxForViewContext<T extends object, U extends NgIterable<T> = NgIterable<T>, K = keyof T> {\n\n  private readonly _record = new ReplaySubject<T>(1);\n  private readonly _record$ = this._record.pipe(distinctUntilChanged(this.distinctBy), share());\n  private readonly _index = new BehaviorSubject<number>(-1);\n  private _implicit: T;\n\n\n  constructor(private _$implicit: T, public rxFor: U, private distinctBy: (a: T, b: T) => boolean = (a, b) => a === b) {\n    // tslint:disable-next-line:no-unused-expression\n    this._record.next(_$implicit);\n  }\n\n  set index(index: number | any) {\n    this._index.next(index);\n  }\n\n  set $implicit(record: T) {\n    this._implicit = record;\n    this._record.next(record);\n  }\n\n  get $implicit(): T {\n    return this._implicit;\n  }\n\n  get record$() {\n    return this._record$;\n  }\n\n  select = (props: K[]): Observable<any> => {\n    return this._record$.pipe(\n      pluck(...props as any)\n    );\n  };\n}\n\nexport interface CustomVariablesProjectors {\n  [variableName: string]: (context) => unknown;\n}\n\nexport interface RecordViewTuple<T extends object, U extends NgIterable<T>> {\n  record: any;\n  view: EmbeddedViewRef<RxForViewContext<T, U>>;\n}\n\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[rxMinimalFor]',\n  providers: [RxEffects]\n})\nexport class RxMinimalForOf<T extends object, U extends NgIterable<T> = NgIterable<T>> implements OnInit, OnDestroy {\n  private evMap: Map<string, EmbeddedViewRef<RxForViewContext<T, U>>> = new Map();\n  private differ: IterableDiffer<T> | null = null;\n  private observables$ = new ReplaySubject<ObservableInput<U>>(1);\n\n  values$ = this.observables$\n    .pipe(\n      distinctUntilChanged(),\n      switchAll()\n    );\n\n  private readonly records$ = defer(() => this.values$.pipe(\n    mergeMap(arr => arr),\n    groupBy(r => r[this._rxTrackBy]),\n    scan((records, o$) => ({\n      ...records,\n      [o$.key]: o$.pipe(distinctUntilChanged(this.rxMinimalForDistinctBy))\n    }), {}),\n    mergeAll(),\n    shareReplay({ refCount: true, bufferSize: 1 })\n  ));\n\n  @Input()\n  set rxMinimalFor(potentialObservable: ObservableInput<U> | null | undefined) {\n    this.observables$.next(potentialObservable);\n  }\n\n  @Input()\n  set rxMinimalForOf(potentialObservable: ObservableInput<U> | null | undefined) {\n    this.observables$.next(potentialObservable);\n  }\n\n  _rxTrackBy = 'id';\n  @Input()\n  rxMinimalForDistinctBy = (a, b) => a.value === b.value;\n\n  @Input()\n  set rxMinimalForTrackBy(key: string) {\n    if (key) {\n      this._rxTrackBy = key;\n    } else {\n      this._rxTrackBy = 'id';\n    }\n  }\n\n\n  constructor(\n    private rxEffects: RxEffects,\n    private cdRef: ChangeDetectorRef,\n    private readonly templateRef: TemplateRef<RxForViewContext<T, U>>,\n    private readonly viewContainerRef: ViewContainerRef,\n    private iterableDiffers: IterableDiffers\n  ) {\n\n  }\n\n  initDiffer(iterable: U = [] as U) {\n    this.differ = this.iterableDiffers.find(iterable).create((index: number, item: T) => item[this._rxTrackBy]);\n    this.rxEffects.hold(this.values$.pipe(\n      startWith(iterable),\n      map(i => ({ diff: this.differ.diff(i), iterable: i })),\n      filter(r => r.diff != null),\n      shareReplay(1)\n    ), (r) => this.applyChanges(r.diff, r.iterable));\n  }\n\n  ngOnInit() {\n    this.rxEffects.hold(this.values$.pipe(take(1)), (value) => this.initDiffer(value));\n  }\n\n  ngOnDestroy() {\n    this.viewContainerRef.clear();\n  }\n\n  private applyChanges(changes: IterableChanges<T>, iterable: U) {\n    changes.forEachOperation((\n      r: IterableChangeRecord<T>,\n      previousIndex: number | null,\n      currentIndex: number | null\n    ) => {\n      const idx = currentIndex == null ? undefined : currentIndex;\n      const recordId = r.item[this._rxTrackBy];\n      const name = 'rxNext';\n      const evName = name + recordId;\n\n      // enter\n      if (r.previousIndex == null) {\n\n        const evc = new RxForViewContext(r.item, iterable, this.rxMinimalForDistinctBy);\n        const view = this.viewContainerRef\n          .createEmbeddedView(this.templateRef, evc, idx);\n        this.evMap.set(evName, view);\n        view.detectChanges();\n\n      } else if (currentIndex == null) {\n\n        this.viewContainerRef.remove(\n          previousIndex === null ? undefined : previousIndex);\n\n      } else if (previousIndex !== null) {\n\n        const view = <EmbeddedViewRef<RxForViewContext<T, U>>>this.viewContainerRef.get(previousIndex);\n        this.viewContainerRef.move(view, idx);\n        view.context.$implicit = r.item;\n\n      }\n    });\n\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const viewRef =\n        <EmbeddedViewRef<RxForViewContext<T, U>>>this.viewContainerRef.get(record.currentIndex);\n      viewRef.context.$implicit = record.item;\n    });\n    /*\n     // behavior like *ngFor\n     const tuplesToDetectChanges: RecordViewTuple<T, U>[] = [];\n     // TODO: dig into `IterableDiffer`\n     changes.forEachOperation(\n     (\n     changeRecord: IterableChangeRecord<T>,\n     previousIndex: number | null,\n     currentIndex: number | null\n     ) => {\n     const id = changeRecord.item[this._rxTrackBy];\n     // Insert\n     if (changeRecord.previousIndex == null) {\n     const evName = 'rxNext' + id;\n     // this is basically the first run\n     // create the embedded view for each value with default values\n     this.templateManager.displayView('rxNext', id);\n     tuplesToDetectChanges.push({\n     view: this.templateManager.getEmbeddedView(evName),\n     record: changeRecord\n     });\n\n     } else if (currentIndex == null) {\n\n     this.viewContainerRef.remove(\n     previousIndex === null ? undefined : previousIndex);\n\n     } else if (previousIndex !== null) {\n\n     const view = <EmbeddedViewRef<RxForViewContext<T, U>>>this.viewContainerRef.get(previousIndex);\n     this.viewContainerRef.move(view, currentIndex);\n     tuplesToDetectChanges.push({\n     view,\n     record: changeRecord\n     });\n     }\n     });\n\n     for (let i = 0; i < tuplesToDetectChanges.length; i++) {\n     this._perViewChange(tuplesToDetectChanges[i].view, tuplesToDetectChanges[i].record);\n     }\n\n     for (let index = 0, count = this.viewContainerRef.length; index < count; index++) {\n     this.templateManager.updateViewContext({\n     index, count,\n     rxFor: iterable,\n     record$: this.records$.pipe(map(records => records[this._rxTrackBy]))\n     });\n\n     }\n\n     changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n     const viewRef =\n     <EmbeddedViewRef<RxForViewContext<T, U>>>this.viewContainerRef.get(record.currentIndex);\n     viewRef.context.$implicit = record.item;\n     viewRef.detectChanges();\n     });\n\n     */\n  }\n\n  private _perViewChange(\n    view: EmbeddedViewRef<RxForViewContext<T, U>>, record: IterableChangeRecord<T>) {\n    view.context.$implicit = record.item;\n    view.detectChanges();\n  }\n\n\n}\n"],"sourceRoot":"webpack:///"}